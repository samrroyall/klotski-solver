{"version":3,"sources":["solver.ts","App.js","index.js"],"names":["Dir","oppositeDir","dir","Left","Right","Up","Down","oppositeDirs","dirs","numDirs","length","res","Array","i","cloneBlock","block","rowPos","colPos","numRows","numCols","moveBlock","Board","blocks_","_cells","blocks","moves","hash","solved","Error","this","insertBlocks","setHash","setMoves","isSolved","fourBlock","j","toString","left","right","up","down","row","col","push","initRowPos","initColPos","stack","currentDirs","initDir","top","pop","undefined","makeMove","nextDir","newDirs","findMoves","newBlock","winningBlock","cloneBoard","board","move","b1","b2","TreeNode","board_","parent_","parent","headDist","hashes","children","childBoard","has","child","Solver","head","tail","Set","queue","add","shift","console","log","getChildren","node","BoardBlock","props","size","className","BoardCell","hasOwnProperty","currRow","parseInt","id","split","currCol","onMouseUp","onDropFunc","key","BoardRow","cells","map","cell","val","state","blocksAdded","onDrop","bind","e","dragBlock","newBlocks","currentTarget","setState","onAddBlock","NoBlock","tempRow","tempCell","b","r","c","getBlocks","React","Component","DraggableBlock","rel","pos","drag","drop","button","currPos","getBoundingClientRect","document","addEventListener","onDragFunc","stopPropagation","preventDefault","x","pageX","y","pageY","removeEventListener","style","position","onMouseDown","Toolbar","show","Buttons","clearButton","onClick","onClear","doubleClearButton","onDoubleClear","defaultButton","onDefault","solveButton","onSolve","prevButton","onPrev","nextButton","onNext","finishButton","onFinish","cleared","finished","Content","displayText","default","clear","doubleClear","solve","next","prev","finish","dragBlockInfo","clearDragBlock","s","solutionMoves","getBoards","numMoves","numMovesText","boards","boardIdx","err","alert","n","callFunction","repeater","setInterval","clearInterval","initialBlocks","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9a9bc0ae.chunk.js","sourcesContent":["enum Dir { Left, Right, Up, Down }\r\n\r\nfunction oppositeDir(dir: Dir): Dir {\r\n    // for a given direction, return its opposites\r\n    if (dir === Dir.Left) return Dir.Right;\r\n    else if (dir === Dir.Right) return Dir.Left;\r\n    else if (dir === Dir.Up) return Dir.Down;\r\n    else return Dir.Up;\r\n}\r\n\r\nfunction oppositeDirs(dirs: Array<Dir>): Array<Dir> {\r\n    // for a list of directions, return a reversed list of the opposites \r\n    // of these directions\r\n    let numDirs: number = dirs.length;\r\n    let res: Array<Dir> = new Array<Dir>(numDirs);\r\n    for (let i: number = 0; i < numDirs; i++) {\r\n        res[numDirs-i-1] = oppositeDir(dirs[i]);\r\n    }\r\n    return res;\r\n}\r\n\r\ninterface Block {\r\n    readonly numRows: number;\r\n    readonly numCols: number;\r\n    rowPos: number;\r\n    colPos: number;\r\n}\r\n\r\nfunction cloneBlock(block: Block): Block {\r\n    return ({\r\n        rowPos: block.rowPos,\r\n        colPos: block.colPos,\r\n        numRows: block.numRows,\r\n        numCols: block.numCols\r\n    });\r\n}\r\n\r\ninterface Move {\r\n    readonly block: Block;\r\n    readonly dirs: Array<Dir>;\r\n}\r\n\r\n\r\nfunction moveBlock(block: Block, dirs: Array<Dir>): void {\r\n    // for each direction in a direction list, update the block \r\n    // positioning accordingly\r\n    for (let dir of dirs) {\r\n        if (dir === Dir.Left) block.colPos--;\r\n        else if (dir === Dir.Right) block.colPos++;\r\n        else if (dir === Dir.Up) block.rowPos--;\r\n        else block.rowPos++;\r\n    }\r\n    return;\r\n}\r\n\r\nfunction equivalentBlocks(b1: Block, b2: Block): boolean {\r\n    // return a boolean value representing whether two blocks are equivalent\r\n    return (\r\n      b1.rowPos === b2.rowPos && \r\n      b1.colPos === b2.colPos &&\r\n      b1.numRows === b2.numRows && \r\n      b1.numCols === b2.numCols\r\n    );\r\n}\r\n\r\n\r\nclass Board {\r\n    // ATTRIBUTES\r\n    private _cells: Array<Array<Block | null>> = [\r\n        [null, null, null, null],\r\n        [null, null, null, null],\r\n        [null, null, null, null],\r\n        [null, null, null, null],\r\n        [null, null, null, null],\r\n    ];\r\n    readonly blocks: Array<Block>;\r\n    readonly moves: Array<Move>;\r\n    readonly hash: string;\r\n    readonly solved: boolean;\r\n\r\n    // METHODS\r\n    private insertBlocks(): void {\r\n        // for each block, ensure that all board cells to be covered by the \r\n        // block are free; if so, place `block` in all covered cells.\r\n        let fourBlock: boolean = false;\r\n        for (let block of this.blocks) {\r\n            if (block.numRows*block.numCols === 4 && !fourBlock) fourBlock = true; \r\n            else if (block.numRows*block.numCols === 4) throw new Error(\"Only one block of size 4 may be placed.\");\r\n            for (let i: number = block.rowPos; i < block.rowPos + block.numRows; i++) {\r\n                for (let j: number = block.colPos; j < block.colPos + block.numCols; j++) {\r\n                    if (this._cells[i][j] === null) {\r\n                        this._cells[i][j] = block;\r\n                    } else {\r\n                        throw new Error(\"Invalid block positioning\");\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (!fourBlock) throw new Error(\"One block of size 4 must be placed.\");\r\n    }\r\n    private setHash(): string {\r\n        // walk through `_cells` matrix, convert blocks to simple strings, and\r\n        // concatenate them into the `hash` string\r\n        let res: string = \"\";\r\n        for (let i: number = 0; i < 5; i++) {\r\n            for (let j: number  = 0; j < 4; j++) {\r\n                let block: Block | null = this._cells[i][j];\r\n                if (block === null) {\r\n                    res += \"0\";\r\n                } else if ( block.numRows*block.numCols === 2) {\r\n                    res += (block.numRows === 1 ? \"2H\" : \"2V\");\r\n                } else {\r\n                    res += (block.numRows*block.numCols).toString();\r\n                } \r\n            }\r\n        }\r\n        return res;\r\n    }\r\n    private currentDirs(block: Block): Array<Dir> {\r\n        // for a given block return a list of directions corresponding \r\n        // to open moves\r\n        let dirs: Array<Dir> = new Array<Dir>();\r\n        let left: boolean = true;\r\n        let right: boolean = true;\r\n        let up: boolean = true;\r\n        let down: boolean = true;\r\n        // check horizontal moves\r\n        for (let row: number = block.rowPos; row < block.rowPos + block.numRows; row++) {\r\n            // Left\r\n            let col: number = block.colPos;\r\n            if (left && (col < 1 || this._cells[row][col-1] !== null)) left = false;\r\n            // Right\r\n            col = block.colPos + block.numCols - 1;\r\n            if (right && (col > 2 || this._cells[row][col+1] !== null)) right = false;\r\n        }\r\n        // check vertical moves\r\n        for (let col: number = block.colPos; col < block.colPos + block.numCols; col++) {\r\n            // Up\r\n            let row: number = block.rowPos;\r\n            if (up && (row < 1 || this._cells[row-1][col] !== null)) up = false;\r\n            // Down\r\n            row = block.rowPos + block.numRows - 1;\r\n            if (down && (row > 3 || this._cells[row+1][col] !== null)) down = false;\r\n        }\r\n        // Push valid directions to result list\r\n        if (left) dirs.push(Dir.Left);\r\n        if (right) dirs.push(Dir.Right);\r\n        if (up) dirs.push(Dir.Up);\r\n        if (down) dirs.push(Dir.Down);\r\n        return dirs;\r\n    }\r\n    private makeMove(block: Block, dirs: Array<Dir>): void {\r\n        // for each direction in a given list of directions and a block, \r\n        // move the block and update the `_cells` matrix\r\n        let numRows: number = block.numRows;\r\n        let numCols: number = block.numCols;\r\n        for (let dir of dirs) {\r\n            let initRowPos: number = block.rowPos;\r\n            let initColPos: number = block.colPos;\r\n            moveBlock(block, [dir]); // update block positions\r\n            // update `_cells` for left or up moves\r\n            if (dir === Dir.Left|| dir === Dir.Up) {\r\n                for (let i: number = initRowPos; i < initRowPos + numRows; i++) {\r\n                    for (let j: number = initColPos; j < initColPos + numCols; j++) {\r\n                        if (dir === Dir.Left) this._cells[i][j-1] = block;\r\n                        else this._cells[i-1][j] = block;\r\n                        this._cells[i][j] = null;\r\n                    }\r\n                }\r\n            // update `_cells` for right or down moves\r\n            } else {\r\n                for (let i: number = initRowPos + numRows - 1; i >= initRowPos; i--) {\r\n                    for (let j: number = initColPos + numCols - 1; j >= initColPos; j--) {\r\n                        if (dir === Dir.Right) this._cells[i][j+1] = block;\r\n                        else this._cells[i+1][j] = block;\r\n                        this._cells[i][j] = null;\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n    private findMoves(block: Block): Array<Array<Dir>> {\r\n        // given a block, do a depth first search for each available direction\r\n        // that is not a step backward and return a list of the valid direction paths\r\n        let res: Array<Array<Dir>> = new Array<Array<Dir>>();\r\n        let stack: Array<Array<Dir>> = new Array<Array<Dir>>();\r\n        // push initial directions to stack\r\n        for (let initDir of this.currentDirs(block)) stack.push([initDir]);\r\n        while (stack.length > 0) {\r\n            let top: Array<Dir> | undefined = stack.pop(); // get top\r\n            if (top !== undefined) {\r\n                res.push(top); // push dirs to result\r\n                this.makeMove(block, top); // move block\r\n                // return valid directions from current position\r\n                for (let nextDir of this.currentDirs(block)) {\r\n                    // ensure next direction is not a move backward\r\n                    if (nextDir !== oppositeDir(top[top.length-1])) {\r\n                        let newDirs: Array<Dir> = [...top];\r\n                        newDirs.push(nextDir);\r\n                        stack.push(newDirs); // push new dirs list\r\n                    }\r\n                }\r\n                this.makeMove(block, oppositeDirs(top)); // unMove block\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n    private setMoves(): Array<Move> {\r\n        // for each block, find all valid move paths and push\r\n        // the corresponding Move objects to the `moves` array\r\n        let res: Array<Move> = new Array<Move>();\r\n        for (let block of this.blocks) {\r\n            for (let dirs of this.findMoves(block)) {\r\n                // clone move block\r\n                let newBlock: Block = cloneBlock(block);\r\n                // add move to result list\r\n                res.push({\r\n                    block: newBlock, \r\n                    dirs: dirs\r\n                });\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n    private isSolved(): boolean {\r\n        let winningBlock: Block | null = this._cells[3][1];\r\n        if (winningBlock !== null) {\r\n            return (\r\n                winningBlock.rowPos === 3 && \r\n                winningBlock.colPos === 1 &&\r\n                winningBlock.numRows * winningBlock.numCols === 4\r\n            );\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // CONSTRUCTOR \r\n    constructor(blocks_: Array<Block>) {\r\n        if (blocks_.length < 10) throw new Error(\"At least 10 blocks must be placed!\");\r\n        this.blocks = blocks_;\r\n        this.insertBlocks();\r\n        this.hash = this.setHash();\r\n        this.moves = this.setMoves();\r\n        this.solved = this.isSolved();\r\n    }\r\n}\r\n\r\n\r\nfunction cloneBoard(board: Board, move: Move): Board {\r\n    // function to generate a new board following a move\r\n    let blocks: Array<Block> = new Array<Block>();\r\n    for (let block of board.blocks) blocks.push(cloneBlock(block));\r\n    for (let block of blocks) {\r\n        if (equivalentBlocks(block, move.block)) {\r\n            moveBlock(block, move.dirs);\r\n        }\r\n    }\r\n    let newBoard: Board = new Board(blocks);\r\n    return newBoard;\r\n}\r\n\r\n\r\nclass TreeNode {\r\n    // ATTRIBUTES\r\n    readonly board: Board;\r\n    readonly parent: TreeNode | null;\r\n    readonly headDist: number = 0;\r\n\r\n    // METHODS\r\n    getChildren(hashes: Set<string>): Array<TreeNode> {\r\n        let children: Array<TreeNode> = new Array<TreeNode>();\r\n        for (let move of this.board.moves) {\r\n            let childBoard: Board = cloneBoard(this.board, move);\r\n            if (!hashes.has(childBoard.hash)) {\r\n                let child: TreeNode = new TreeNode(childBoard, this);\r\n                children.push(child);\r\n            }\r\n        }\r\n        return children;\r\n    }\r\n\r\n    // CONSTRUCTOR\r\n    constructor(board_: Board, parent_: TreeNode | null) {\r\n        this.board = board_;\r\n        this.parent = parent_;\r\n        if (this.parent !== null) this.headDist = this.parent.headDist + 1;\r\n    }\r\n}\r\n\r\n\r\nclass Solver {\r\n    // ATTRIBUTES\r\n    head: TreeNode;\r\n    tail: TreeNode | null = null;\r\n\r\n    // METHODS\r\n    solve(): void {\r\n        // TO-DO\r\n        let hashes: Set<string> = new Set<string>();\r\n        let queue: Array<TreeNode> = new Array<TreeNode>();\r\n        queue.push(this.head); // add the head node to queue\r\n        hashes.add(this.head.board.hash); // add the head node board hash to set\r\n        // BFS board configurations until a winning board is found\r\n        while (queue.length > 0) {\r\n            let top: TreeNode | undefined = queue.shift();\r\n            if (top !== undefined) {\r\n                if (top.board.solved) {\r\n                    this.tail = top;\r\n                    console.log(\"Solution found of length: \" + top.headDist);\r\n                    return;\r\n                }\r\n                for (let child of top.getChildren(hashes)) {\r\n                    hashes.add(child.board.hash); // add new hash to hashes set\r\n                    queue.push(child);\r\n                }\r\n            }\r\n        }\r\n        return;\r\n    }\r\n    getBoards(): Array<Array<Block>> {\r\n        if (this.tail === null) {\r\n            return [];\r\n        } else {\r\n            let res: Array<Array<Block>> = new Array<Array<Block>>(this.tail.headDist);\r\n            let node: TreeNode | null = this.tail;\r\n            while (node !== null) {\r\n                res[node.headDist-1] = node.board.blocks;\r\n                node = node.parent;\r\n            }\r\n            return res;\r\n        }\r\n    }\r\n    // CONSTRUCTOR\r\n    constructor(blocks: Array<Block>) {\r\n        this.head = new TreeNode(new Board(blocks), null);\r\n    }\r\n}\r\n\r\nexport default Solver;","import React from 'react';\nimport Solver from './solver';\n\nfunction BoardBlock(props) {\n  if (props.size === 4) {\n    return (\n      <div className=\"col-6 fourblock m-0 bg-danger border border-dark rounded\"></div>\n    );\n  } else if (props.size === 2) {\n    if (props.block.numCols === 1) {\n        return (\n          <div className=\"col-3 twoblockV m-0 bg-primary border border-dark rounded\"></div>\n        );\n    } else if (props.block.numCols === 2) {\n        return (\n          <div className=\"col-6 twoblockH m-0 bg-warning border border-dark rounded\"></div>\n        );\n    }\n  } else if (props.size === 1) {\n    return (\n      <div className=\"col-3 oneblock m-0 bg-success border border-dark rounded\"></div>\n    );\n  }\n}\n\nfunction BoardCell(props) {\n  if (props.block == null) {\n    // nothing\n    return (\n      <span></span>\n    );\n  } else {\n    if (props.block.hasOwnProperty(\"colPos\") && props.block.hasOwnProperty(\"rowPos\")) {\n      const size = (\n        props.block.hasOwnProperty(\"numCols\") ? \n        props.block.numRows*props.block.numCols : \n        props.block.numRows*props.block.numRows\n      );\n      if (size === 0) {\n        // empty space\n        const currRow = parseInt(props.id.split(\",\")[0]);\n        const currCol = parseInt(props.id.split(\",\")[1]);\n        if ((currRow === 3 || currRow === 4) && (currCol === 1 || currCol === 2)) {\n          return (\n            <div className=\"col-3 boardcell winningcell m-0 border\"\n              id={props.id}\n              onMouseUp={props.onDropFunc}>\n            </div>\n          );\n        } else {\n          return (\n            <div className=\"col-3 boardcell m-0 border\"\n              id={props.id}\n              onMouseUp={props.onDropFunc}>\n            </div>\n          );\n        }\n\n      } else {\n        return (\n          <BoardBlock\n            key={props.id}\n            size={size}\n            block={props.block}\n          />\n        );\n      }\n    } else {\n      // placeholder for next row overflow from block\n      return (\n        <div className=\"col-3 m-0\"></div>\n      );\n    }\n  }\n}\n\nfunction BoardRow(props) {\n  const row = props.cells.map( (cell) =>\n    <BoardCell\n      key={cell.id}\n      id={cell.id}\n      block={cell.val}\n      onDropFunc={props.onDropFunc}\n    />\n  );\n  return (\n    <div className=\"row boardrow p-0 m-0\">\n      {row}\n    </div>\n  );\n\n}\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      blocks: this.props.blocks,\n      blocksAdded: false\n    };\n\n    this.onDrop = this.onDrop.bind(this);\n  }\n\n  // Function passed to the BoardCell component which will pass the rowPos and\n  // colPos information from the BoardCell where a DraggableBlock is dropped.\n  // This function uses that information and the DraggableBlock's numRows and\n  // numCols properties send from the Content component through the dragBlock\n  // property.\n  onDrop(e) {\n    if (this.props.dragBlock) {\n      // instantiate new blocks list\n      var newBlocks = this.state.blocks;\n      newBlocks.push({ \n        rowPos: parseInt(e.currentTarget.id.split(\",\")[0]), \n        colPos: parseInt(e.currentTarget.id.split(\",\")[1]), \n        numRows: this.props.dragBlock.numRows,\n        numCols: this.props.dragBlock.numCols\n      });\n      // push new block\n      this.setState(state => ({\n        blocksAdded: true,\n        blocks: newBlocks\n      }));\n      this.props.onAddBlock(this.state.blocks);\n    }\n  }\n\n  // function for displaying current board blocks\n  getBlocks(blocks) {\n    // maintain sync between the current blocks in the Board component's state\n    // and the blocks passed in by the Content component\n    if (blocks !== this.state.blocks) {\n      this.setState(state => ({\n        blocks: blocks\n      }));\n    }\n    const NoBlock = {\n      numRows: 0,\n      numCols: 0\n    };\n    // initialize 2d array with no blocks\n    var board = new Array(5);\n    for (var i = 0; i < 5; i++) {\n      var tempRow = {\n        id: i,\n        row: new Array(4)\n      }\n      for (var j = 0; j < 4; j++) {\n        var tempCell = {\n          id: i.toString() + \",\" + j.toString(), \n          val: {\n            numRows: 0,\n            numCols: 0,\n            rowPos: i,\n            colPos: j,\n          }\n        }\n        tempRow.row[j] = tempCell;\n      }\n      board[i] = tempRow;\n    }\n    // insert blocks\n    for (var b = 0; b < blocks.length; b++) {\n      var block = blocks[b];\n      for (var r = block.rowPos; r < block.rowPos + block.numRows; r++) {\n        for (var c = block.colPos; c < block.colPos + block.numCols; c++) {\n          if (r === block.rowPos && c === block.colPos) {\n            ((board[r].row)[c]).val = block;\n          } else if (r === block.rowPos){\n            ((board[r].row)[c]).val = null;\n          } else {\n            ((board[r].row)[c]).val = NoBlock;\n          }\n        }\n      }\n    }\n    return board;\n  }\n\n  render() { \n    const rows = this.getBlocks(this.props.blocks);\n    const board = rows.map( (row) =>\n      <BoardRow\n        key={row.id}\n        cells={row.row}\n        onDropFunc={this.onDrop}\n      />\n    )\n    return ( \n      <div className=\"p-0 mt-4 border\" id=\"board\">\n        {board}   \n      </div>\n    );\n  }\n}\n\nclass DraggableBlock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rel: null,\n      pos: {\n        left: 0,\n        top: 0\n      }\n    };\n    this.drag = this.drag.bind(this);\n    this.move = this.move.bind(this);\n    this.drop = this.drop.bind(this);\n  }\n\n  // function called on mouse down on a draggable block\n  drag(e) {\n    if (e.button !== 0) return\n    var currPos = e.currentTarget.getBoundingClientRect();\n    this.setState((state) => ({\n      rel: {\n        left: currPos.left,\n        top: currPos.top\n      }\n    }));\n    document.addEventListener(\"mousemove\", this.move); // listen for mouse move\n    document.addEventListener(\"mouseup\", this.drop); // listen for mouse up (drop)\n    this.props.onDragFunc(e.currentTarget.id); // send content the current block's ID\n    e.stopPropagation();\n    e.preventDefault();\n  }\n  \n  // function called on mouse move after mouse down on a draggable block\n  move(e) {\n    var x = e.pageX;\n    var y = e.pageY;\n    this.setState((state) => ({\n      pos: {\n        left: x - this.state.rel.left,\n        top: y - this.state.rel.top\n      }\n    }));\n    e.stopPropagation();\n    e.preventDefault();\n  }\n\n\n  // function called on mouse up after mouse down on a draggable block\n  drop(e) {\n    this.setState((state) => ({\n      rel: null,\n      pos: {\n        left: 0,\n        top: 0\n      }\n    }));\n    document.removeEventListener(\"mousemove\", this.move);\n    document.removeEventListener(\"mouseup\", this.drop);\n    e.stopPropagation();\n    e.preventDefault();\n  }\n\n  render() {\n    if (this.props.size === 4) {\n      return (\n        <div className=\"draggable-fourblock m-0 bg-danger border border-dark rounded draggable\"\n          id={this.props.id}\n          style={{\n            position: \"relative\",\n            left: this.state.pos.left + \"px\",\n            top: this.state.pos.top + \"px\"\n          }}\n          onMouseDown={this.drag}>\n        </div>\n      );\n    } else if (this.props.size === 2) {\n      if (this.props.block.numCols === 1) {\n        return (\n          <div className=\"draggable-twoblockV m-0 bg-primary border border-dark rounded draggable\"\n            id={this.props.id}\n            style={{\n              position: \"relative\",\n              left: this.state.pos.left + \"px\",\n              top: this.state.pos.top + \"px\"\n            }}\n            onMouseDown={this.drag}>\n          </div>\n        );\n      } else if (this.props.block.numCols === 2) {\n        return (\n          <div className=\"draggable-twoblockH m-0 bg-warning border border-dark rounded draggable\"\n            id={this.props.id}\n            style={{\n              position: \"relative\",\n              left: this.state.pos.left + \"px\",\n              top: this.state.pos.top + \"px\"\n            }}\n            onMouseDown={this.drag}>\n          </div>\n        );\n      }\n    } else if (this.props.size === 1) {\n      return (\n        <div className=\"draggable-oneblock m-0 bg-success border border-dark rounded draggable\"\n          id={this.props.id}\n          style={{\n            position: \"relative\",\n            left: this.state.pos.left + \"px\",\n            top: this.state.pos.top + \"px\"\n          }}\n          onMouseDown={this.drag}>\n        </div>\n      );\n    }\n  }\n}\n\nfunction Toolbar(props) {\n  // only show toolbar when board is cleared or blocks are being added\n  if (props.show) {\n    return (\n      <div className=\"col-10 col-xl-4 mt-5\">\n        <div className=\"row justify-content-center\">\n          <DraggableBlock \n            size={4} \n            id=\"2,2\"\n            onDragFunc={props.onDragFunc}\n          />\n          <div className=\"mx-2\"></div>\n            <DraggableBlock \n              size={2} \n              id=\"2,1\" \n              block={{ numRows: 2, numCols: 1 }} \n              onDragFunc={props.onDragFunc}\n            />\n        </div>\n        <div className=\"row justify-content-center mt-3\">\n          <DraggableBlock \n            size={1} \n            id=\"1,1\" \n            onDragFunc={props.onDragFunc}\n          />\n          <div className=\"mx-2\"></div>\n          <DraggableBlock \n            size={2} \n            id=\"1,2\" \n            block={{ numRows: 1, numCols: 2 }} \n            onDragFunc={props.onDragFunc}\n          />\n        </div>\n      </div>\n    );\n  } else {\n    return <span></span>;\n  }\n}\n\nfunction Buttons(props) {\n  // button for clearing board\n  const clearButton = (\n    <button className=\"btn btn-danger mr-2\" \n      onClick={props.onClear}>\n        Clear\n    </button>\n  );\n  // button for clearing a user made board\n  const doubleClearButton = (\n    <button className=\"btn btn-danger mr-2\" \n      onClick={props.onDoubleClear}>\n        Clear\n    </button>\n  );\n  // button for displaying the default board\n  const defaultButton = (\n    <button className=\"btn btn-warning mx-1\" \n      onClick={props.onDefault}>\n        Default\n    </button>\n  );\n  // button for running script to solve board\n  const solveButton = (\n    <button className=\"btn btn-primary ml-2\" \n      onClick={props.onSolve}>\n        Solve!\n    </button>\n  );\n  // button to see previous move in solution\n  const prevButton = (\n    <button className=\"btn btn-danger mr-2\" \n      onClick={props.onPrev}\n      id=\"prev-btn\">\n        Prev\n    </button>\n  );\n  //button to see next move in solution\n  const nextButton = (\n    <button className=\"btn btn-warning mx-2\" \n      onClick={props.onNext}>\n        Next\n    </button>\n  );\n  // button to finalize moves in solution\n  const finishButton = (\n    <button className=\"btn btn-success ml-2\" \n      onClick={props.onFinish}>\n        Finish\n    </button>\n  );\n  \n  // buttons displayed after solve button is pressed\n  if (props.solved) {\n    return (\n      <div className=\"text-center mt-3\">\n        {prevButton}\n        {nextButton}\n        {finishButton}\n      </div>\n    );\n  // buttons displayed after blocks have been dropped\n  } else if (props.blocksAdded){\n    return (\n      <div className=\"text-center mt-3\">\n        {doubleClearButton}\n        {solveButton}\n      </div>\n    );\n  // buttons displayed when board is cleared of blocks\n  } else if (props.cleared){\n    return (\n      <div className=\"text-center mt-3\">\n        {defaultButton}\n        {solveButton}\n      </div>\n    );\n  // buttons displayed when default board is shown\n  } else if (props.finished) {\n    return <span></span>;\n  } else {\n    return (\n      <div className=\"text-center mt-3\">\n        {clearButton}\n        {solveButton}\n      </div>\n    );\n  }\n}\n\nclass Content extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      blocks: [],\n      blocksAdded: false,\n      cleared: true,\n      displayText: \"Klotski Solver\",\n      default: false,\n      solved: false,\n      finished: false,\n      dragBlock: null\n    };\n\n    this.blocksAdded = this.blocksAdded.bind(this);\n    this.clear = this.clear.bind(this);\n    this.doubleClear = this.doubleClear.bind(this);\n    this.default = this.default.bind(this);\n    this.solve = this.solve.bind(this);\n    this.next = this.next.bind(this);\n    this.prev = this.prev.bind(this);\n    this.finish = this.finish.bind(this);\n    this.dragBlockInfo = this.dragBlockInfo.bind(this);\n    this.clearDragBlock = this.clearDragBlock.bind(this);\n  }\n\n  // Function passed to the Board component that updates the Content\n  // blocksAdded state property when a user adds a block to the board.\n  blocksAdded(blocks) {\n    this.setState(state => ({\n      blocks: blocks,\n      blocksAdded: true,\n      cleared: false,\n      default: false\n    }))\n  }\n\n  // Function passed to the Buttons component that updates the Content\n  // cleared state property when a user clicks the clear button.\n  clear() {\n    this.setState(state => ({\n      blocks: [],\n      blocksAdded: false,\n      cleared: true,\n      default: false\n    }));\n  }\n\n  // Function passed to the Buttons component that calls `clear()` and \n  // updates the Content doubleCleared state state property when a user \n  // clicks the doubleClear button.\n  doubleClear() {\n    this.clear();\n  }\n\n  // Function passed to the Buttons component that updates the Content\n  // solved state property when a user clicks the solve button.\n  solve() {\n    try {\n      var s = new Solver(this.state.blocks);\n      s.solve();\n      let solutionMoves = s.getBoards();\n      const numMoves = solutionMoves.length;\n      let numMovesText = (numMoves > 0 ? \"Solution of Length \" + numMoves.toString() + \" Found!\" : \"No Solution Found :(\");\n      this.setState(state => ({\n        blocksAdded: false,\n        cleared: false,\n        default: false,\n        displayText: numMovesText,\n        boards: solutionMoves,\n        boardIdx: -1,\n        solved: true\n      }));\n    } catch (err) {\n      alert(err);\n    }\n  }\n\n  // Function passed to the Buttons component that updates the Content\n  // boards and blocks state properties when a user clicks the next button.\n  next() {\n    if (this.state.boardIdx === this.state.boards.length-1) {\n      this.setState(state => ({\n        displayText: \"You Win!\"\n      }));\n      return true;\n    } else {\n      this.setState(state => ({\n        blocks: this.state.boards[this.state.boardIdx + 1],\n        boardIdx: this.state.boardIdx + 1,\n        displayText: \"Move \" + (this.state.boardIdx+2).toString()\n      }));\n      return false;\n    }\n  }\n\n  // Function passed to the Buttons component that updates the Content\n  // boards and blocks state properties when a user clicks the prev button.\n  prev() {\n    if (this.state.boardIdx === -1) {\n      return;\n    } else {\n      this.setState(state => ({\n        blocks: this.state.boards[this.state.boardIdx - 1],\n        boardIdx: this.state.boardIdx - 1,\n        displayText: (this.state.boardIdx <= 0 ? \"Klotski Solver\" : \"Move \" + this.state.boardIdx.toString())\n      }));\n    }\n  }\n\n  // Function passed to the Buttons component that updates the Content\n  // boards and blocks state properties when a user clicks the next button.\n  finish() {\n    this.setState(state => ({ \n      solved: false,\n      finished: true \n    }));\n    let i = this.state.boardIdx;\n    let n = this.state.boards.length;\n    var callFunction = this.next;\n    // repeat calls to next with a .5 second interval\n    var repeater = setInterval(function () {\n      if (i < n) {\n        callFunction();\n        i++;\n      } else {\n        clearInterval(repeater);\n      }\n    }, 500);\n  }\n\n\n  // Function passed to the Buttons component that updates the Content\n  // default state property when a user clicks the default button.\n  default() {\n    const initialBlocks = [\n      { rowPos: 0, colPos: 0, numRows: 2, numCols: 1 },\n      { rowPos: 0, colPos: 1, numRows: 2, numCols: 2 },\n      { rowPos: 0, colPos: 3, numRows: 2, numCols: 1 },\n      { rowPos: 2, colPos: 0, numRows: 2, numCols: 1 },\n      { rowPos: 2, colPos: 1, numRows: 1, numCols: 2 },\n      { rowPos: 2, colPos: 3, numRows: 2, numCols: 1 },\n      { rowPos: 3, colPos: 1, numRows: 1, numCols: 1 },\n      { rowPos: 3, colPos: 2, numRows: 1, numCols: 1 },\n      { rowPos: 4, colPos: 0, numRows: 1, numCols: 1 },\n      { rowPos: 4, colPos: 3, numRows: 1, numCols: 1 }\n    ]\n    this.setState(state => ({\n      blocks: initialBlocks,\n      blocksAdded: false,\n      cleared: false,\n      default: true\n    }));\n  }\n\n  // Function passed to the Toolbar component (onDragFunc) which alerts the Content\n  // component when a DraggableBlock is being dragged and send the block's \n  // corresponding ID which contains the block's numRows and numCols properties.\n  // This information is used to update the Content dragBlock state property, which\n  // is passed to the Board component.\n  dragBlockInfo(id) {\n    this.setState(state => ({\n      dragBlock: {\n        numRows: parseInt(id.split(\",\")[0]),\n        numCols: parseInt(id.split(\",\")[1])\n      }\n    }));\n  } \n\n  // Function passed to the Board component on mouse down, which is used to nullify\n  // the Content dragBlock state property.\n  clearDragBlock(e) {\n    this.setState(state => ({\n      dragBlock: null\n    }));\n  }\n\n  render() {\n    return (\n      <div id=\"content-wrapper\">\n        <div className=\"h1 text-center mt-1 mb-0\" id=\"header\">\n          {this.state.displayText} \n        </div>\n        <div className=\"row justify-content-center px-0 mx-0\"\n          onMouseDown={this.clearDragBlock}>\n          <div className=\"col-4 board\">\n            <Board \n              blocks={this.state.blocks}\n              dragBlock={this.state.dragBlock}\n              onAddBlock={this.blocksAdded}\n            />\n            <Buttons \n              blocksAdded={this.state.blocksAdded}\n              cleared={this.state.cleared}\n              finished={this.state.finished}\n              solved={this.state.solved}\n              onClear={this.clear}\n              onDoubleClear={this.doubleClear}\n              onDefault={this.default}\n              onFinish={this.finish}\n              onNext={this.next}\n              onPrev={this.prev}\n              onSolve={this.solve}\n            />\n          </div>\n          <Toolbar \n            show={this.state.cleared || this.state.blocksAdded}\n            onDragFunc={this.dragBlockInfo}\n          />\n        </div>\n        <div className=\"text-center text-secondary\" id=\"footer\">\n          Developed by Sam Royall\n        </div>\n      </div>\n    );   \n  }\n}\n\nfunction App() {\n  return (\n    <Content />   \n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}