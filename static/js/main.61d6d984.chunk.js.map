{"version":3,"sources":["solver.ts","App.js","index.js"],"names":["Dir","oppositeDir","dir","Left","Right","Up","Down","oppositeDirs","dirs","numDirs","length","res","Array","i","cloneBlock","block","rowPos","colPos","numRows","numCols","moveBlock","Board","blocks_","winningRow_","winningCol_","_cells","blocks","winningCol","winningRow","this","insertBlocks","fourBlock","Error","j","left","right","up","down","row","col","push","initRowPos","initColPos","stack","currentDirs","initDir","top","pop","undefined","makeMove","nextDir","newDirs","findMoves","newBlock","numNulls","toString","winningBlock","cloneBoard","board","move","b1","b2","TreeNode","board_","parent_","parent","headDist","hashes","children","getMoves","childBoard","childHash","getHash","has","add","child","Solver","head","tail","Set","queue","shift","isSolved","getChildren","node","BoardBlock","props","fourblock","className","twoblockV","twoblockH","oneblock","size","alert","BoardCell","click","bind","e","onClickFunc","currentTarget","id","underblock","hasOwnProperty","currRow","parseInt","split","currCol","winRow","winCol","winCell","onMouseUp","onDropFunc","clickableWinCell","onMouseDown","cell","clickableCell","key","React","Component","BoardRow","cells","map","val","state","blocksAdded","onDrop","dragBlock","lastRow","lastCol","newBlocks","setState","onAddBlock","NoBlock","tempRow","tempCell","b","r","c","getBlocks","DraggableBlock","rel","pos","drag","drop","button","currPos","getBoundingClientRect","document","addEventListener","onDragFunc","stopPropagation","preventDefault","x","pageX","y","pageY","removeEventListener","steez","position","classString","style","Toolbar","show","Buttons","clearButton","onClick","onClear","doubleClearButton","onDoubleClear","defaultButton","onDefault","finishButton","onFinish","nextButton","onNext","prevButton","onPrev","solveButton","onSolve","finished","solved","cleared","Content","default","displayText","clear","clearDragBlock","doubleClear","dragBlockInfo","finish","next","prev","restart","setWinningPos","solve","clearFunc","setTimeout","s","solutionMoves","getBoards","numMoves","boards","boardIdx","err","n","callFunction","repeater","setInterval","clearInterval","initialBlocks","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.61d6d984.chunk.js","sourcesContent":["enum Dir { Left, Right, Up, Down }\r\n\r\nfunction oppositeDir(dir: Dir): Dir {\r\n    // for a given direction, return its opposites\r\n    if (dir === Dir.Left) return Dir.Right;\r\n    else if (dir === Dir.Right) return Dir.Left;\r\n    else if (dir === Dir.Up) return Dir.Down;\r\n    else return Dir.Up;\r\n}\r\n\r\nfunction oppositeDirs(dirs: Array<Dir>): Array<Dir> {\r\n    // for a list of directions, return a reversed list of the opposites \r\n    // of these directions\r\n    let numDirs: number = dirs.length;\r\n    let res: Array<Dir> = new Array<Dir>(numDirs);\r\n    for (let i: number = 0; i < numDirs; i++) {\r\n        res[numDirs-i-1] = oppositeDir(dirs[i]);\r\n    }\r\n    return res;\r\n}\r\n\r\ninterface Block {\r\n    readonly numRows: number;\r\n    readonly numCols: number;\r\n    rowPos: number;\r\n    colPos: number;\r\n}\r\n\r\nfunction cloneBlock(block: Block): Block {\r\n    return ({\r\n        rowPos: block.rowPos,\r\n        colPos: block.colPos,\r\n        numRows: block.numRows,\r\n        numCols: block.numCols\r\n    });\r\n}\r\n\r\ninterface Move {\r\n    readonly block: Block;\r\n    readonly dirs: Array<Dir>;\r\n}\r\n\r\n\r\nfunction moveBlock(block: Block, dirs: Array<Dir>): void {\r\n    // for each direction in a direction list, update the block \r\n    // positioning accordingly\r\n    for (let dir of dirs) {\r\n        if (dir === Dir.Left) block.colPos--;\r\n        else if (dir === Dir.Right) block.colPos++;\r\n        else if (dir === Dir.Up) block.rowPos--;\r\n        else block.rowPos++;\r\n    }\r\n    return;\r\n}\r\n\r\nfunction equivalentBlocks(b1: Block, b2: Block): boolean {\r\n    // return a boolean value representing whether two blocks are equivalent\r\n    return (\r\n      b1.rowPos === b2.rowPos && \r\n      b1.colPos === b2.colPos &&\r\n      b1.numRows === b2.numRows && \r\n      b1.numCols === b2.numCols\r\n    );\r\n}\r\n\r\n\r\nclass Board {\r\n    // ATTRIBUTES\r\n    private _cells: Array<Array<Block | null>> = [\r\n        [null, null, null, null],\r\n        [null, null, null, null],\r\n        [null, null, null, null],\r\n        [null, null, null, null],\r\n        [null, null, null, null],\r\n    ];\r\n    readonly blocks: Array<Block>;\r\n    readonly winningCol: number; \r\n    readonly winningRow: number; \r\n\r\n    // METHODS\r\n    private insertBlocks(): void {\r\n        // for each block, ensure that all board cells to be covered by the \r\n        // block are free; if so, place `block` in all covered cells.\r\n        let fourBlock: boolean = false;\r\n        for (let block of this.blocks) {\r\n            if (block.numRows*block.numCols === 4 && !fourBlock) fourBlock = true; \r\n            else if (block.numRows*block.numCols === 4) throw new Error(\"There must be exacly one block of size 4\");\r\n            for (let i: number = block.rowPos; i < block.rowPos + block.numRows; i++) {\r\n                for (let j: number = block.colPos; j < block.colPos + block.numCols; j++) {\r\n                    if (this._cells[i][j] === null) {\r\n                        this._cells[i][j] = block;\r\n                    } else {\r\n                        throw new Error(\"Invalid block positioning\");\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (!fourBlock) throw new Error(\"There must be exactly one block of size 4\");\r\n    }\r\n    private currentDirs(block: Block): Array<Dir> {\r\n        // for a given block return a list of directions corresponding \r\n        // to open moves\r\n        let dirs: Array<Dir> = new Array<Dir>();\r\n        let left: boolean = true;\r\n        let right: boolean = true;\r\n        let up: boolean = true;\r\n        let down: boolean = true;\r\n        // check horizontal moves\r\n        for (let row: number = block.rowPos; row < block.rowPos + block.numRows; row++) {\r\n            // Left\r\n            let col: number = block.colPos;\r\n            if (left && (col < 1 || this._cells[row][col-1] !== null)) left = false;\r\n            // Right\r\n            col = block.colPos + block.numCols - 1;\r\n            if (right && (col > 2 || this._cells[row][col+1] !== null)) right = false;\r\n        }\r\n        // check vertical moves\r\n        for (let col: number = block.colPos; col < block.colPos + block.numCols; col++) {\r\n            // Up\r\n            let row: number = block.rowPos;\r\n            if (up && (row < 1 || this._cells[row-1][col] !== null)) up = false;\r\n            // Down\r\n            row = block.rowPos + block.numRows - 1;\r\n            if (down && (row > 3 || this._cells[row+1][col] !== null)) down = false;\r\n        }\r\n        // Push valid directions to result list\r\n        if (left) dirs.push(Dir.Left);\r\n        if (right) dirs.push(Dir.Right);\r\n        if (up) dirs.push(Dir.Up);\r\n        if (down) dirs.push(Dir.Down);\r\n        return dirs;\r\n    }\r\n    private makeMove(block: Block, dirs: Array<Dir>): void {\r\n        // for each direction in a given list of directions and a block, \r\n        // move the block and update the `_cells` matrix\r\n        let numRows: number = block.numRows;\r\n        let numCols: number = block.numCols;\r\n        for (let dir of dirs) {\r\n            let initRowPos: number = block.rowPos;\r\n            let initColPos: number = block.colPos;\r\n            moveBlock(block, [dir]); // update block positions\r\n            // update `_cells` for left or up moves\r\n            if (dir === Dir.Left|| dir === Dir.Up) {\r\n                for (let i: number = initRowPos; i < initRowPos + numRows; i++) {\r\n                    for (let j: number = initColPos; j < initColPos + numCols; j++) {\r\n                        if (dir === Dir.Left) this._cells[i][j-1] = block;\r\n                        else this._cells[i-1][j] = block;\r\n                        this._cells[i][j] = null;\r\n                    }\r\n                }\r\n            // update `_cells` for right or down moves\r\n            } else {\r\n                for (let i: number = initRowPos + numRows - 1; i >= initRowPos; i--) {\r\n                    for (let j: number = initColPos + numCols - 1; j >= initColPos; j--) {\r\n                        if (dir === Dir.Right) this._cells[i][j+1] = block;\r\n                        else this._cells[i+1][j] = block;\r\n                        this._cells[i][j] = null;\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n    private findMoves(block: Block): Array<Array<Dir>> {\r\n        // given a block, do a depth first search for each available direction\r\n        // that is not a step backward and return a list of the valid direction paths\r\n        let res: Array<Array<Dir>> = new Array<Array<Dir>>();\r\n        let stack: Array<Array<Dir>> = new Array<Array<Dir>>();\r\n        // push initial directions to stack\r\n        for (let initDir of this.currentDirs(block)) stack.push([initDir]);\r\n        while (stack.length > 0) {\r\n            let top: Array<Dir> | undefined = stack.pop(); // get top\r\n            if (top !== undefined) {\r\n                res.push(top); // push dirs to result\r\n                this.makeMove(block, top); // move block\r\n                // return valid directions from current position\r\n                // since a board will have two free spaces, move paths\r\n                // can be maximum length 2\r\n                if (top.length < 2) {\r\n                    for (let nextDir of this.currentDirs(block)) {\r\n                        // ensure next direction is not a move backward\r\n                        if (nextDir !== oppositeDir(top[top.length-1])) {\r\n                            let newDirs: Array<Dir> = [...top];\r\n                            newDirs.push(nextDir);\r\n                            stack.push(newDirs); // push new dirs list\r\n                        }\r\n                    }\r\n                }\r\n                this.makeMove(block, oppositeDirs(top)); // unMove block\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n    getMoves(): Array<Move> {\r\n        // for each block, find all valid move paths and push\r\n        // the corresponding Move objects to the `moves` array\r\n        let res: Array<Move> = new Array<Move>();\r\n        for (let block of this.blocks) {\r\n            for (let dirs of this.findMoves(block)) {\r\n                // clone move block\r\n                let newBlock: Block = cloneBlock(block);\r\n                // add move to result list\r\n                res.push({\r\n                    block: newBlock, \r\n                    dirs: dirs\r\n                });\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n    getHash(): string {\r\n        // walk through `_cells` matrix, convert blocks to simple strings, and\r\n        // concatenate them into the `hash` string\r\n        let res: string = \"\";\r\n        let numNulls: number = 0;\r\n        for (let i: number = 0; i < 5; i++) {\r\n            for (let j: number  = 0; j < 4; j++) {\r\n                let block: Block | null = this._cells[i][j];\r\n                if (block === null) {\r\n                    res += \"0\";\r\n                    numNulls++;\r\n                } else if ( block.numRows*block.numCols === 2) {\r\n                    res += (block.numRows === 1 ? \"2H\" : \"2V\");\r\n                } else {\r\n                    res += (block.numRows*block.numCols).toString();\r\n                } \r\n            }\r\n        }\r\n        if (numNulls !== 2) throw new Error(\"There must be exactly 2 free spaces on the board\");\r\n        return res;\r\n    }\r\n    isSolved(): boolean {\r\n        let winningBlock: Block | null = this._cells[this.winningRow][this.winningCol];\r\n        if (winningBlock !== null) {\r\n            return (\r\n                winningBlock.rowPos === this.winningRow && \r\n                winningBlock.colPos === this.winningCol &&\r\n                winningBlock.numRows*winningBlock.numCols === 4\r\n            );\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // CONSTRUCTOR \r\n    constructor(blocks_: Array<Block>, winningRow_: number, winningCol_: number) {\r\n        this.winningRow = winningRow_;\r\n        this.winningCol = winningCol_;\r\n        this.blocks = blocks_;\r\n        this.insertBlocks();\r\n    }\r\n}\r\n\r\n\r\nfunction cloneBoard(board: Board, move: Move): Board {\r\n    // function to generate a new board following a move\r\n    let blocks: Array<Block> = new Array<Block>();\r\n    for (let block of board.blocks) {\r\n        let newBlock: Block = cloneBlock(block);\r\n        if (equivalentBlocks(newBlock, move.block)) {\r\n            moveBlock(newBlock, move.dirs);\r\n        }\r\n        blocks.push(newBlock);\r\n    }\r\n    let newBoard: Board = new Board(blocks, board.winningRow, board.winningCol);\r\n    return newBoard;\r\n}\r\n\r\n\r\nclass TreeNode {\r\n    // ATTRIBUTES\r\n    readonly board: Board;\r\n    readonly parent: TreeNode | null;\r\n    readonly headDist: number = 0;\r\n\r\n    // METHODS\r\n    getChildren(hashes: Set<string>): Array<TreeNode> {\r\n        let children: Array<TreeNode> = new Array<TreeNode>();\r\n        for (let move of this.board.getMoves()) {\r\n            let childBoard: Board = cloneBoard(this.board, move);\r\n            let childHash: string = childBoard.getHash();\r\n            if (!hashes.has(childHash)) {\r\n                hashes.add(childHash);\r\n                let child: TreeNode = new TreeNode(childBoard, this);\r\n                children.push(child);\r\n            }\r\n        }\r\n        return children;\r\n    }\r\n\r\n    // CONSTRUCTOR\r\n    constructor(board_: Board, parent_: TreeNode | null) {\r\n        this.board = board_;\r\n        this.parent = parent_;\r\n        if (this.parent !== null) this.headDist = this.parent.headDist + 1;\r\n    }\r\n}\r\n\r\n\r\nclass Solver {\r\n    // ATTRIBUTES\r\n    head: TreeNode;\r\n    tail: TreeNode | null = null;\r\n\r\n    // METHODS\r\n    solve(): void {\r\n        // TO-DO\r\n        let hashes: Set<string> = new Set<string>();\r\n        let queue: Array<TreeNode> = new Array<TreeNode>();\r\n        queue.push(this.head); // add the head node to queue\r\n        hashes.add(this.head.board.getHash()); // add the head node board hash to set\r\n        // BFS board configurations until a winning board is found\r\n        while (queue.length > 0) {\r\n            let top: TreeNode | undefined = queue.shift();\r\n            if (top !== undefined) {\r\n                if (top.board.isSolved()) {\r\n                    this.tail = top;\r\n                    return;\r\n                }\r\n                for (let child of top.getChildren(hashes)) queue.push(child);\r\n            }\r\n        }\r\n        return;\r\n    }\r\n    getBoards(): Array<Array<Block>> {\r\n        if (this.tail === null) {\r\n            return [];\r\n        } else {\r\n            let res: Array<Array<Block>> = new Array<Array<Block>>(this.tail.headDist);\r\n            let node: TreeNode | null = this.tail;\r\n            while (node !== null) {\r\n                res[node.headDist-1] = node.board.blocks;\r\n                node = node.parent;\r\n            }\r\n            return res;\r\n        }\r\n    }\r\n    // CONSTRUCTOR\r\n    constructor(blocks: Array<Block>, winningRow: number, winningCol: number) {\r\n        this.head = new TreeNode(new Board(blocks, winningRow, winningCol), null);\r\n    }\r\n}\r\n\r\nexport default Solver;","import React from 'react';\nimport Solver from './solver.ts';\nimport './style.css';\n\nfunction BoardBlock(props) {\n  const fourblock = <div className=\"col-6 fourblock m-0 bg-danger border border-dark rounded\"></div>;\n  const twoblockV = <div className=\"col-3 twoblockV m-0 bg-primary border border-dark rounded\"></div>;\n  const twoblockH = <div className=\"col-6 twoblockH m-0 bg-warning border border-dark rounded\"></div>;\n  const oneblock = <div className=\"col-3 oneblock m-0 bg-success border border-dark rounded\"></div>;\n  if (props.size === 4) return fourblock;\n  else if (props.size === 2 && props.block.numCols === 1) return twoblockV;\n  else if (props.size === 2) return twoblockH;\n  else if (props.size === 1) return oneblock;\n  else alert(\"Invalid board cell properties\");\n}\n\nclass BoardCell extends React.Component {\n  constructor(props) {\n    super(props);\n    this.click = this.click.bind(this);\n  }\n\n  click(e) {\n    this.props.onClickFunc(e.currentTarget.id);\n  }\n  \n  render() {\n    // currently under placed block\n    if (this.props.block == null) return <span></span>;\n\n    // return placeholder block in next row under block overflow\n    const underblock = <div className=\"col-3 p-0 m-0\"></div>;\n    if (!this.props.block.hasOwnProperty(\"colPos\")) return underblock;\n\n    const currRow = parseInt(this.props.id.split(\",\")[0]);\n    const currCol = parseInt(this.props.id.split(\",\")[1]);\n    const size = this.props.block.numRows*this.props.block.numCols;\n    // empty space\n    if (size === 0) {\n      // winning cell vars\n      let winRow = this.props.winningRow;\n      let winCol = this.props.winningCol;\n      const winCell = (\n        <div className=\"col-3 boardcell winningcell p-0 m-0 border\"\n          id={this.props.id}\n          onMouseUp={this.props.onDropFunc}>\n        </div>\n      );\n      const clickableWinCell = (\n        <div className=\"col-3 boardcell winningcell p-0 m-0 border\"\n          id={this.props.id}\n          onMouseUp={this.props.onDropFunc}\n          onMouseDown={this.click}>\n        </div>\n      );\n      // normal cell vars\n      const cell = (\n        <div className=\"col-3 boardcell p-0 m-0 border\"\n          id={this.props.id}\n          onMouseUp={this.props.onDropFunc}>\n        </div>\n      );\n      const clickableCell = (\n        <div className=\"col-3 boardcell p-0 m-0 border\"\n          id={this.props.id}\n          onMouseUp={this.props.onDropFunc}\n          onMouseDown={this.click}>\n        </div>\n      );\n      // winning cell\n      if ((currRow === winRow || currRow === winRow+1) && (currCol === winCol || currCol === winCol+1)) {\n        if (currRow === 4 || currCol === 3) return winCell;\n        else return clickableWinCell;\n      // normal cell\n      } else {\n        if (currRow === 4 || currCol === 3) return cell;\n        else return clickableCell;\n      }\n    // block placed\n    } else {\n      return (\n        <BoardBlock\n          key={this.props.id}\n          size={size}\n          block={this.props.block}\n        />\n      );\n    }\n  }\n}\n\nfunction BoardRow(props) {\n  const row = props.cells.map( (cell) =>\n    <BoardCell\n      key={cell.id}\n      id={cell.id}\n      block={cell.val}\n      onClickFunc={props.onClickFunc}\n      onDropFunc={props.onDropFunc}\n      winningRow={props.winningRow}\n      winningCol={props.winningCol}\n    />\n  );\n  return (\n    <div className=\"row boardrow p-0 m-0\">\n      {row}\n    </div>\n  );\n\n}\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      blocks: this.props.blocks,\n      blocksAdded: false,\n    };\n\n    this.onDrop = this.onDrop.bind(this);\n  }\n\n  // Function passed to the BoardCell component which will pass the rowPos and\n  // colPos information from the BoardCell where a DraggableBlock is dropped.\n  // This function uses that information and the DraggableBlock's numRows and\n  // numCols properties send from the Content component through the dragBlock\n  // property.\n  onDrop(e) {\n    if (this.props.dragBlock) {\n      // instantiate new block\n      let newBlock = { \n        rowPos: parseInt(e.currentTarget.id.split(\",\")[0]), \n        colPos: parseInt(e.currentTarget.id.split(\",\")[1]), \n        numRows: this.props.dragBlock.numRows,\n        numCols: this.props.dragBlock.numCols\n      };\n      let lastRow = newBlock.rowPos + newBlock.numRows - 1; // newBlock's max row\n      let lastCol = newBlock.colPos + newBlock.numCols - 1; // newBlock's max column\n      // ensure four block is not in the winning position\n      if (\n        newBlock.numRows*newBlock.numCols === 4 && \n        newBlock.rowPos === this.props.winningRow && \n        newBlock.colPos === this.props.winningCol\n      ) {\n        alert(\"The block of size 4 cannot be placed in the winning position\");\n      // ensure block does not fall off board\n      } else if(lastRow > 4 || lastCol > 3) {\n        alert(\"Invalid block placement\");\n      // ensure block of size 4 is not on the winning row\n      } else {\n        let newBlocks = this.state.blocks;\n        newBlocks.push(newBlock);\n        // push new block\n        this.setState(state => ({\n          blocksAdded: true,\n          blocks: newBlocks\n        }));\n        this.props.onAddBlock(this.state.blocks);\n      }\n    }\n  }\n\n  // function for displaying current board blocks\n  getBlocks(blocks) {\n    // maintain sync between the current blocks in the Board component's state\n    // and the blocks passed in by the Content component\n    if (blocks !== this.state.blocks) {\n      this.setState(state => ({\n        blocks: blocks\n      }));\n    }\n    const NoBlock = {\n      numRows: 0,\n      numCols: 0\n    };\n    // initialize 2d array with no blocks\n    var board = new Array(5);\n    for (var i = 0; i < 5; i++) {\n      var tempRow = {\n        id: i,\n        row: new Array(4)\n      }\n      for (var j = 0; j < 4; j++) {\n        var tempCell = {\n          id: i.toString() + \",\" + j.toString(), \n          val: {\n            numRows: 0,\n            numCols: 0,\n            rowPos: i,\n            colPos: j,\n          }\n        }\n        tempRow.row[j] = tempCell;\n      }\n      board[i] = tempRow;\n    }\n    // insert blocks\n    for (var b = 0; b < blocks.length; b++) {\n      var block = blocks[b];\n      let lastRow = block.rowPos + block.numRows - 1;\n      let lastCol = block.colPos + block.numCols - 1;      \n      for (var r = block.rowPos; r <= lastRow; r++) {\n        for (var c = block.colPos; c <= lastCol; c++) {\n          if (r === block.rowPos && c === block.colPos) {\n            ((board[r].row)[c]).val = block;\n          } else if (r === block.rowPos){\n            ((board[r].row)[c]).val = null;\n          } else {\n            ((board[r].row)[c]).val = NoBlock;\n          }\n        }\n      }\n    }\n    return board;\n  }\n\n  render() { \n    const rows = this.getBlocks(this.props.blocks);\n    const board = rows.map( (row) =>\n      <BoardRow\n        key={row.id}\n        cells={row.row}\n        onClickFunc={this.props.onClickFunc}\n        onDropFunc={this.onDrop}\n        winningRow={this.props.winningRow}\n        winningCol={this.props.winningCol}\n      />\n    )\n    return ( \n      <div className=\"p-0 mt-4 border\" id=\"board\">\n        {board}   \n      </div>\n    );\n  }\n}\n\nclass DraggableBlock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rel: null,\n      pos: { left: 0, top: 0}\n    };\n    this.drag = this.drag.bind(this);\n    this.move = this.move.bind(this);\n    this.drop = this.drop.bind(this);\n  }\n\n  // function called on mouse down on a draggable block\n  drag(e) {\n    if (e.button !== 0) return\n    let currPos = e.currentTarget.getBoundingClientRect();\n    this.setState((state) => ({\n      rel: {\n        left: currPos.left,\n        top: currPos.top\n      }\n    }));\n    document.addEventListener(\"mousemove\", this.move); // listen for mouse move\n    document.addEventListener(\"mouseup\", this.drop); // listen for mouse up (drop)\n    this.props.onDragFunc(e.currentTarget.id); // send content the current block's ID\n    e.stopPropagation();\n    e.preventDefault();\n  }\n  \n  // function called on mouse move after mouse down on a draggable block\n  move(e) {\n    let x = e.pageX;\n    let y = e.pageY;\n    this.setState((state) => ({\n      pos: {\n        left: x - this.state.rel.left,\n        top: y - this.state.rel.top\n      }\n    }));\n    e.stopPropagation();\n    e.preventDefault();\n  }\n\n  // function called on mouse up after mouse down on a draggable block\n  drop(e) {\n    this.setState((state) => ({\n      rel: null,\n      pos: {left: 0, top: 0}\n    }));\n    document.removeEventListener(\"mousemove\", this.move);\n    document.removeEventListener(\"mouseup\", this.drop);\n    e.stopPropagation();\n    e.preventDefault();\n  }\n\n  render() {\n    // dragblock vars\n    const steez = {\n      position: \"relative\",\n      left: this.state.pos.left + \"px\",\n      top: this.state.pos.top + \"px\"\n    };\n    const oneblockString = \"draggable-oneblock m-0 bg-success border border-dark rounded draggable\";\n    const twoblockHString = \"draggable-twoblockH m-0 bg-warning border border-dark rounded draggable\";\n    const twoblockVString = \"draggable-twoblockV m-0 bg-primary border border-dark rounded draggable\";\n    const fourblockString = \"draggable-fourblock m-0 bg-danger border border-dark rounded draggable\";\n    let classString = \"\";\n    // check block size\n    if (this.props.size === 4) classString = fourblockString;\n    else if (this.props.size === 2 && this.props.block.numCols === 1) classString = twoblockVString;\n    else if (this.props.size === 2) classString = twoblockHString;\n    else if (this.props.size === 1) classString = oneblockString;\n    else alert(\"Invalid draggable block properties\");\n    // return dragblock\n    return (\n      <div className={classString}\n        id={this.props.id}\n        style={steez}\n        onMouseDown={this.drag}>\n      </div>\n    );\n  }\n}\n\nfunction Toolbar(props) {\n  // only show toolbar when board is cleared or blocks are being added\n  if (props.show) {\n    return (\n      <div className=\"col-10 col-xl-4 mt-5\">\n        <div className=\"row justify-content-center\">\n          <DraggableBlock \n            size={4} \n            id=\"2,2\"\n            onDragFunc={props.onDragFunc}\n          />\n          <div className=\"mx-2\"></div>\n            <DraggableBlock \n              size={2} \n              id=\"2,1\" \n              block={{ numRows: 2, numCols: 1 }} \n              onDragFunc={props.onDragFunc}\n            />\n        </div>\n        <div className=\"row justify-content-center mt-3\">\n          <DraggableBlock \n            size={1} \n            id=\"1,1\" \n            onDragFunc={props.onDragFunc}\n          />\n          <div className=\"mx-2\"></div>\n          <DraggableBlock \n            size={2} \n            id=\"1,2\" \n            block={{ numRows: 1, numCols: 2 }} \n            onDragFunc={props.onDragFunc}\n          />\n        </div>\n      </div>\n    );\n  } else {\n    return <span></span>;\n  }\n}\n\nfunction Buttons(props) {\n  // button for clearing board\n  const clearButton = (\n    <button className=\"btn btn-danger mr-2\" \n      onClick={props.onClear}>\n        Clear\n    </button>\n  );\n  // button for clearing a user made board\n  const doubleClearButton = (\n    <button className=\"btn btn-danger mr-2\" \n      onClick={props.onDoubleClear}>\n        Clear\n    </button>\n  );\n  // button for displaying the default board\n  const defaultButton = (\n    <button className=\"btn btn-warning mx-1\" \n      onClick={props.onDefault}>\n        Default\n    </button>\n  );\n  // button to finalize moves in solution\n  const finishButton = (\n    <button className=\"btn btn-success ml-2\" \n      onClick={props.onFinish}>\n        Finish\n    </button>\n  );\n  //button to see next move in solution\n  const nextButton = (\n    <button className=\"btn btn-warning mx-2\" \n      onClick={props.onNext}>\n        Next\n    </button>\n  );\n  \n  // button to see previous move in solution\n  const prevButton = (\n    <button className=\"btn btn-danger mr-2\" \n      onClick={props.onPrev}\n      id=\"prev-btn\">\n        Prev\n    </button>\n  );\n  // button for running script to solve board\n  const solveButton = (\n    <button className=\"btn btn-primary ml-2\" \n      onClick={props.onSolve}>\n        Solve!\n    </button>\n  );\n  \n  // buttons displayed after last solution move is seen \n  if (props.finished) {\n    return <span></span>;\n  // buttons displayed after solve button is pressed\n  } else if (props.solved) {\n    return (\n      <div className=\"text-center mt-3\">\n        {prevButton}\n        {nextButton}\n        {finishButton}\n      </div>\n    );\n  // buttons displayed after blocks have been dropped\n  } else if (props.blocksAdded){\n    return (\n      <div className=\"text-center mt-3\">\n        {doubleClearButton}\n        {solveButton}\n      </div>\n    );\n  // buttons displayed when board is cleared of blocks\n  } else if (props.cleared){\n    return (\n      <div className=\"text-center mt-3\">\n        {defaultButton}\n        {solveButton}\n      </div>\n    );\n  // buttons displayed when default board is shown\n  } else {\n    return (\n      <div className=\"text-center mt-3\">\n        {clearButton}\n        {solveButton}\n      </div>\n    );\n  }\n}\n\nclass Content extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      blocks: [],\n      blocksAdded: false,\n      cleared: true,\n      default: false,\n      displayText: \"Klotski Solver\",\n      dragBlock: null,\n      finished: false,\n      solved: false,\n      winningRow: 3,\n      winningCol: 1\n    };\n\n    this.blocksAdded = this.blocksAdded.bind(this);\n    this.clear = this.clear.bind(this);\n    this.clearDragBlock = this.clearDragBlock.bind(this);\n    this.default = this.default.bind(this);\n    this.doubleClear = this.doubleClear.bind(this);\n    this.dragBlockInfo = this.dragBlockInfo.bind(this);\n    this.finish = this.finish.bind(this);\n    this.next = this.next.bind(this);\n    this.prev = this.prev.bind(this);\n    this.restart = this.restart.bind(this);\n    this.setWinningPos = this.setWinningPos.bind(this);\n    this.solve = this.solve.bind(this);\n  }\n\n  // Function passed to the Board component that updates the Content\n  // blocksAdded state property when a user adds a block to the board.\n  blocksAdded(blocks) {\n    this.setState(state => ({\n      blocks: blocks,\n      blocksAdded: true,\n      cleared: false,\n    }))\n  }\n\n  // Function passed to the Buttons component that updates the Content\n  // cleared state property when a user clicks the clear button.\n  clear() {\n    this.setState(state => ({\n      blocks: [],\n      blocksAdded: false,\n      cleared: true,\n      default: false,\n      displayText: \"Klotski Solver\",\n      solved: false,\n      finished: false,\n      dragBlock: null,\n      winningRow: 3,\n      winningCol: 1\n    }));\n  }\n\n  // Function passed to the Buttons component that calls `clear()` and \n  // updates the Content doubleCleared state state property when a user \n  // clicks the doubleClear button.\n  doubleClear() {\n    this.clear();\n  }\n\n  restart() {\n    let clearFunc = this.clear;\n    setTimeout(\n      function () {clearFunc()},\n      3000\n    );\n  }\n\n  // Function passed to the Buttons component that updates the Content\n  // solved state property when a user clicks the solve button.\n  solve() {\n    try {\n      var s = new Solver(\n        this.state.blocks, \n        this.state.winningRow, \n        this.state.winningCol\n      );\n      s.solve();\n      let solutionMoves = s.getBoards();\n      const numMoves = solutionMoves.length;\n      if (numMoves === 0) {\n        this.setState(state => ({\n          displayText: \"No Solution Found :(\"\n        }));\n        this.restart();\n      } else {\n        this.setState(state => ({\n          blocksAdded: false,\n          default: false,\n          displayText: \"Solution of Length \" + numMoves.toString() + \" Found!\",\n          boards: solutionMoves,\n          boardIdx: -1,\n          solved: true\n        }));\n      }\n    } catch (err) {\n      alert(err);\n    }\n  }\n\n  // Function passed to the Buttons component that updates the Content\n  // boards and blocks state properties when a user clicks the next button.\n  next() {\n    if (this.state.boards.length === 0) {\n      return;\n    } else {\n      if (this.state.boardIdx === this.state.boards.length-1) {\n        this.setState(state => ({\n          solved: false,\n          finished: true,\n          displayText: \"You Win!\"\n        }));\n        this.restart();    \n      } else {\n        this.setState(state => ({\n          blocks: this.state.boards[this.state.boardIdx + 1],\n          boardIdx: this.state.boardIdx + 1,\n          displayText: \"Move \" + (this.state.boardIdx+2).toString()\n        }));\n      }\n    }\n  }\n\n  // Function passed to the Buttons component that updates the Content\n  // boards and blocks state properties when a user clicks the prev button.\n  prev() {\n     if (this.state.boards.length === 0) {\n      return;\n    } else {\n      if (this.state.boardIdx === -1) {\n        return;\n      } else {\n        this.setState(state => ({\n          blocks: this.state.boards[this.state.boardIdx - 1],\n          boardIdx: this.state.boardIdx - 1,\n          displayText: (this.state.boardIdx <= 0 ? \"Klotski Solver\" : \"Move \" + this.state.boardIdx.toString())\n        }));\n      }\n    }\n  }\n\n  // Function passed to the Buttons component that updates the Content\n  // boards and blocks state properties when a user clicks the next button.\n  finish() {\n    this.setState(state => ({ \n      solved: false,\n      finished: true \n    }));\n    let i = this.state.boardIdx;\n    let n = this.state.boards.length;\n    let callFunction = this.next;\n    // repeat calls to next with a .5 second interval\n    var repeater = setInterval(function () {\n      if (i < n) {\n        callFunction();\n        i++;\n      } else {\n        clearInterval(repeater);\n      }\n    }, 250);\n  }\n\n\n  // Function passed to the Buttons component that updates the Content\n  // default state property when a user clicks the default button.\n  default() {\n    const initialBlocks = [\n      { rowPos: 0, colPos: 0, numRows: 2, numCols: 1 },\n      { rowPos: 0, colPos: 1, numRows: 2, numCols: 2 },\n      { rowPos: 0, colPos: 3, numRows: 2, numCols: 1 },\n      { rowPos: 2, colPos: 0, numRows: 2, numCols: 1 },\n      { rowPos: 2, colPos: 1, numRows: 1, numCols: 2 },\n      { rowPos: 2, colPos: 3, numRows: 2, numCols: 1 },\n      { rowPos: 3, colPos: 1, numRows: 1, numCols: 1 },\n      { rowPos: 3, colPos: 2, numRows: 1, numCols: 1 },\n      { rowPos: 4, colPos: 0, numRows: 1, numCols: 1 },\n      { rowPos: 4, colPos: 3, numRows: 1, numCols: 1 }\n    ]\n    this.setState(state => ({\n      blocks: initialBlocks,\n      blocksAdded: false,\n      cleared: false,\n      default: true,\n      winningRow: 3,\n      winningCol: 1\n    }));\n  }\n\n  // Function passed to the Toolbar component (onDragFunc) which alerts the Content\n  // component when a DraggableBlock is being dragged and send the block's \n  // corresponding ID which contains the block's numRows and numCols properties.\n  // This information is used to update the Content dragBlock state property, which\n  // is passed to the Board component.\n  dragBlockInfo(id) {\n    this.setState(state => ({\n      dragBlock: {\n        numRows: parseInt(id.split(\",\")[0]),\n        numCols: parseInt(id.split(\",\")[1])\n      }\n    }));\n  } \n\n  setWinningPos(id) {\n    if (this.state.cleared) {\n      this.setState(state => ({\n        winningRow: parseInt(id.split(\",\")[0]),\n        winningCol: parseInt(id.split(\",\")[1])\n      }));\n    }\n  }\n\n  // Function passed to the Board component on mouse down, which is used to nullify\n  // the Content dragBlock state property.\n  clearDragBlock(e) {\n    this.setState(state => ({\n      dragBlock: null\n    }));\n  }\n\n  render() {\n    return (\n      <div id=\"content-wrapper\">\n        <div className=\"h1 text-center mt-1 mb-0\" id=\"header\">\n          {this.state.displayText} \n        </div>\n        <div className=\"row justify-content-center px-0 mx-0\"\n          onMouseDown={this.clearDragBlock}>\n          <div className=\"col-4 board\">\n            <Board \n              blocks={this.state.blocks}\n              dragBlock={this.state.dragBlock}\n              onAddBlock={this.blocksAdded}\n              onClickFunc={this.setWinningPos}\n              winningRow={this.state.winningRow}\n              winningCol={this.state.winningCol}\n            />\n            <Buttons \n              blocksAdded={this.state.blocksAdded}\n              cleared={this.state.cleared}\n              finished={this.state.finished}\n              solved={this.state.solved}\n              onClear={this.clear}\n              onDefault={this.default}\n              onDoubleClear={this.doubleClear}\n              onFinish={this.finish}\n              onNext={this.next}\n              onPrev={this.prev}\n              onSolve={this.solve}\n            />\n          </div>\n          <Toolbar \n            show={this.state.cleared || this.state.blocksAdded}\n            onDragFunc={this.dragBlockInfo}\n          />\n        </div>\n        <div className=\"text-center text-secondary\" id=\"footer\">\n          Developed by Sam Royall\n        </div>\n      </div>\n    );   \n  }\n}\n\nfunction App() {\n  return (\n    <Content />   \n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}