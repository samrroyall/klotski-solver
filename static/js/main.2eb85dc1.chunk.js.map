{"version":3,"sources":["components/Alert.js","components/Block.js","components/Cell.js","components/Row.js","components/Board.js","components/Buttons.js","solver.ts","components/DraggableBlock.js","components/Toolbar.js","components/App.js","index.js"],"names":["Alert","id","className","role","type","data-dismiss","aria-label","onClick","document","getElementById","classList","add","aria-hidden","getClassStr","block","currRow","currCol","classString","size","numRows","numCols","rowPos","colPos","alert","Block","props","onMouseUp","onDropFunc","onMouseDown","onClickFunc","Cell","parseInt","split","winningRow","winningCol","e","emptyCell","key","coveredCell","Row","cells","map","cell","val","onDrop","dragBlock","currentTarget","maxRow","maxCol","newBlock","onWinningPos","blocks","onAddBlock","newBlocks","t1","b1","l1","r1","i","length","t2","b2","l2","r2","push","checkBlock","Board","rows","row","onWinPosChange","boardMatrix","board","Array","tempRow","j","tempCell","toString","b","currBlock","lastCol","lastRow","r","c","getBlocks","solveButton","f","Buttons","Dir","state","onPrev","nextButton","onNext","finishButton","onFinish","defaultButton","onDefault","onSolve","clearButton","onClear","DraggableBlock","rel","pos","left","top","click","bind","move","drop","button","currPos","getBoundingClientRect","this","setState","addEventListener","onDragFunc","stopPropagation","preventDefault","x","pageX","y","pageY","removeEventListener","steez","position","style","React","Component","toolbarBlocks","fourBlock","twoBlockV","twoBlockH","oneBlock","Toolbar","show","oppositeDir","dir","Left","Right","Up","Down","oppositeDirs","dirs","numDirs","res","cloneBlock","moveBlock","blocks_","winningRow_","winningCol_","_cells","insertBlocks","coveredCells","Error","right","up","down","col","initRowPos","initColPos","currentDirs","initDir","makeMove","nextDir","newDirs","findMoves","winningBlock","cloneBoard","TreeNode","board_","parent_","parent","headDist","hashes","children","getMoves","childBoard","childHash","getHash","has","child","Solver","head","tail","Set","queue","shift","undefined","isSolved","getChildren","node","App","currState","displayText","addBlock","clear","default","dragBlockInfo","finish","next","prev","restart","setWinningPos","solve","defaultBlocks","clearFunc","setTimeout","boards","boardIdx","callFunc","n","repeater","setInterval","clearInterval","s","err","solutionMoves","getBoards","numMoves","winRow","winCol","boardRows","boardCols","header","footer","showToolbar","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2eb85dc1.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../styles/Alert.css';\r\n\r\nlet Alert = () => (\r\n    <div id=\"overlay\">\r\n        <div className=\"alert alert-danger alert-dismissible fade show alert-body\" role=\"alert\">\r\n            <button type=\"button\" \r\n                className=\"close alert-button\"\r\n                data-dismiss=\"alert\"\r\n                aria-label=\"close\"\r\n                onClick={() => document.getElementById(\"overlay\").classList.add(\"hide\")}\r\n            >\r\n                <span aria-hidden=\"true\">&times;</span>\r\n            </button>\r\n\r\n            <div className=\"h4\">Welcome to the Klotski Solver!</div>\r\n            <hr/>\r\n            The goal of Klotski is to create a board with <strong>one</strong> red block and \r\n            <strong> two</strong> empty spaces and attempt to move the red block to the winning \r\n            position (the pink spaces) in as few moves as possible.\r\n            <hr/>\r\n            First, click on the board to set your winning position. \r\n            <br/><br/>\r\n            Next, drag-and-drop (desktop only) or click-to-select and click-to-place blocks\r\n            on the board.\r\n            <br/><br/>\r\n            Finally, click 'Solve' and watch our super cool algorithm find an optimal solution\r\n            to your board. Step though the solution by pressing 'Next' or 'Prev', or simply\r\n            press 'Finish' and watch as the board is solved before your eyes.\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default Alert;\r\n\r\n","import React from 'react';\r\nimport '../styles/Block.css';\r\n\r\nconst oneblock =  \"col-3 boardblock p-0 m-0 bg-success border border-dark rounded\";\r\nconst twoblockV = \"col-3 boardblock p-0 m-0 bg-primary border border-dark\";\r\nconst twoblockH = \"col-3 boardblock p-0 m-0 bg-warning border border-dark\";\r\nconst fourblock = \"col-3 boardblock p-0 m-0 bg-danger border border-dark\"\r\n\r\nfunction getClassStr(block, currRow, currCol) {\r\n    let classString = \"\";\r\n    const size = block.numRows*block.numCols;\r\n    if (size === 1) {\r\n        classString += oneblock;\r\n    } else if (size === 2 && block.numCols === 1) {\r\n        classString += twoblockV;\r\n        classString += (\r\n            currRow === block.rowPos \r\n            ? \" border-bottom-0 rounded-top\"\r\n            : \" border-top-0 rounded-bottom\"\r\n        );\r\n    } else if (size === 2) {\r\n        classString += twoblockH;\r\n        classString += (\r\n            currCol === block.colPos \r\n            ? \" border-right-0 rounded-left\" \r\n            : \" border-left-0 rounded-right\"\r\n        );\r\n    } else if (size === 4) {\r\n        classString += fourblock;\r\n        // remove top or bottom border depending on cell row\r\n        // set first half of rounded border class\r\n        classString += (\r\n            currRow === block.rowPos\r\n            ? \" border-bottom-0 rounded-top\"\r\n            : \" border-top-0 rounded-bottom\"\r\n        )\r\n        // complete rounded border class\r\n        // remove right or left border depending on cell column\r\n        classString += (\r\n            currCol === block.colPos\r\n            ? \"-left border-right-0\"\r\n            : \"-right border-left-0\"\r\n        )\r\n    } else {\r\n        alert(\"Invalid board block properties\");\r\n        return;\r\n    }\r\n    return classString;\r\n}\r\n\r\nlet Block = (props) => (\r\n    <div className={getClassStr(props.block, props.currRow, props.currCol)}\r\n        id={props.id}\r\n        onMouseUp={props.onDropFunc}\r\n        onMouseDown={props.onClickFunc}\r\n    />\r\n);\r\n\r\nexport default Block;","import React from 'react';\r\nimport Block from './Block';\r\nimport '../styles/Cell.css';\r\n\r\nfunction emptyCell(props) {\r\n    const currRow = parseInt(props.id.split(\",\")[0]);\r\n    const currCol = parseInt(props.id.split(\",\")[1]);\r\n    const classString = (\r\n        (currRow !== props.winningRow && currRow !== props.winningRow+1) || (currCol !== props.winningCol && currCol !== props.winningCol+1)\r\n        ? \"col-3 boardcell p-0 m-0 border\"\r\n        : \"col-3 boardcell winningcell p-0 m-0 border\"\r\n    );\r\n    return (\r\n        <div className={classString}\r\n            id={props.id}\r\n            onMouseUp={props.onDropFunc}\r\n            onMouseDown={(e) => props.onClickFunc(e)}\r\n        />\r\n    );\r\n}\r\n\r\nconst coveredCell = (props) => (\r\n    <Block\r\n        key={props.id}\r\n        id={props.id}\r\n        block={props.block}\r\n        currRow={parseInt(props.id.split(\",\")[0])}\r\n        currCol={parseInt(props.id.split(\",\")[1])}\r\n        size={props.block.numRows*props.block.numCols}\r\n        onDropFunc={props.onDropFunc}\r\n        onClickFunc={(e) => props.onClickFunc(e)}\r\n    />\r\n);\r\n\r\nlet Cell = (props) => (\r\n    props.block.numRows*props.block.numCols === 0\r\n    ? emptyCell(props)\r\n    : coveredCell(props)\r\n);\r\n\r\nexport default Cell;","import React from 'react';\r\nimport Cell from './Cell';\r\nimport '../styles/Row.css';\r\n\r\nlet Row = (props) => (\r\n    <div className=\"row boardrow p-0 m-0\">\r\n        {props.cells.map( (cell) =>\r\n            <Cell\r\n                key={cell.id}\r\n                id={cell.id}\r\n                block={cell.val}\r\n                onClickFunc={props.onClickFunc}\r\n                onDropFunc={props.onDropFunc}\r\n                winningRow={props.winningRow}\r\n                winningCol={props.winningCol}\r\n            />\r\n        )}\r\n    </div>\r\n);\r\n\r\nexport default Row;","import React from 'react';\r\nimport Row from './Row';\r\nimport '../styles/Board.css';\r\n\r\nconst boardRows = 5;\r\nconst boardCols = 4;\r\n\r\n// Function for checking overlap between placed blocks and initiating\r\n// subsequent replacements.\r\nfunction checkBlock(newBlock, blocks, onAddBlock) {\r\n    let newBlocks = [];\r\n    const t1 = newBlock.rowPos;\r\n    const b1 = newBlock.rowPos + newBlock.numRows - 1;\r\n    const l1 = newBlock.colPos;\r\n    const r1 = newBlock.colPos + newBlock.numCols - 1;\r\n    for (let i = 0; i < blocks.length; i++) {\r\n        const block = blocks[i];\r\n        const t2 = block.rowPos;\r\n        const b2 = block.rowPos + block.numRows - 1;\r\n        const l2 = block.colPos;\r\n        const r2 = block.colPos + block.numCols - 1;\r\n        const bottomLeftOverlap = t2 >= t1 && t2 <= b1 && r2 >= l1 && r2 <= r1;\r\n        const bottomRightOverlap = t2 >= t1 && t2 <= b1 && l2 >= l1 && l2 <= r1;\r\n        const topLeftOverlap = t1 >= t2 && t1 <= b2 && l1 >= l2 && l1 <= r2;\r\n        const topRightOverlap = t1 >= t2 && t1 <= b2 && r1 >= l2 && r1 <= r2;\r\n        if (bottomLeftOverlap || bottomRightOverlap || topLeftOverlap || topRightOverlap) continue;\r\n        newBlocks.push(block);\r\n    }\r\n    newBlocks.push(newBlock);\r\n    onAddBlock(newBlocks);\r\n}\r\n\r\n// Function passed to the BoardCell component which will pass the rowPos and\r\n// colPos information from the BoardCell where a DraggableBlock is dropped.\r\n// This function uses that information and the DraggableBlock's numRows and\r\n// numCols properties send from the Content component through the dragBlock\r\n// property.\r\nfunction onDrop(props, e) {\r\n    // only drop a block if there is a block \r\n    // that has been dragged\r\n    if (!props.dragBlock) return;\r\n\r\n    const currRow = parseInt(e.currentTarget.id.split(\",\")[0]);\r\n    const currCol = parseInt(e.currentTarget.id.split(\",\")[1]);\r\n    const maxRow = currRow + props.dragBlock.numRows - 1;\r\n    const maxCol = currCol + props.dragBlock.numCols - 1;\r\n\r\n    if (maxRow < boardRows && maxCol < boardCols) {\r\n        // instantiate new block\r\n        const newBlock = { \r\n            rowPos: currRow, \r\n            colPos: currCol, \r\n            numRows: props.dragBlock.numRows,\r\n            numCols: props.dragBlock.numCols\r\n        };\r\n        const size = newBlock.numRows*newBlock.numCols;\r\n        const onWinningPos = newBlock.rowPos === props.winningRow && newBlock.colPos === props.winningCol;\r\n        // if the fourBlock is not being placed on the winning position,\r\n        // push newBlock to Content component to be fed back into Board via props\r\n        if (size !== 4 || !onWinningPos) {  \r\n            checkBlock(newBlock, props.blocks, props.onAddBlock); \r\n        }\r\n    }\r\n}\r\n\r\n// function for displaying current board blocks\r\nfunction getBlocks(blocks) {\r\n    // initialize 2d array with no blocks\r\n    let board = new Array(5); \r\n    for (let i = 0; i < boardRows; i++) {\r\n        let tempRow = { id: i, row: new Array(4) }\r\n        for (let j = 0; j < boardCols; j++) {\r\n            const tempCell = {\r\n                id: i.toString() + \",\" + j.toString(), \r\n                val: { numRows: 0, numCols: 0, rowPos: i, colPos: j }\r\n            }\r\n            tempRow.row[j] = tempCell;\r\n        }\r\n        board[i] = tempRow;\r\n    }\r\n    // insert blocks\r\n    for (let b = 0; b < blocks.length; b++) {\r\n        const currBlock = blocks[b];\r\n        const lastCol = currBlock.colPos + currBlock.numCols - 1;      \r\n        const lastRow = currBlock.rowPos + currBlock.numRows - 1;      \r\n        for (let r = currBlock.rowPos; r <= lastRow; r++) {\r\n            for (let c = currBlock.colPos; c <= lastCol; c++) {\r\n                ((board[r].row)[c]).val = currBlock;\r\n            }\r\n        }\r\n    }\r\n    return board;\r\n}\r\n\r\nconst boardMatrix = (props, rows) => (\r\n    rows.map( (row) =>\r\n        <Row key={row.id}\r\n            cells={row.row}\r\n            onClickFunc={(props.dragBlock ? (e) => onDrop(props, e) : props.onWinPosChange)}\r\n            onDropFunc={(e) => onDrop(props, e)}\r\n            winningRow={props.winningRow}\r\n            winningCol={props.winningCol}\r\n        />\r\n    )\r\n);\r\n\r\nlet Board = (props) => (\r\n    <div className=\"p-0 mt-4 border\" id=\"board\">\r\n        { boardMatrix(props, getBlocks(props.blocks)) }   \r\n    </div>\r\n);\r\n\r\nexport default Board;","import React from 'react';\r\n\r\n// button for clearing board\r\nconst clearButton = (f) => (\r\n    <button className=\"btn btn-sm btn-danger mr-2\" onClick={f}>Clear</button>\r\n);\r\n// button for displaying the default board\r\nconst defaultButton = (f) =>  (\r\n    <button className=\"btn btn-sm btn-warning mx-1\" onClick={f}>Default</button>\r\n);\r\n// button to finalize moves in solution\r\nconst finishButton = (f) =>  (\r\n    <button className=\"btn btn-sm btn-success ml-2\" onClick={f}>Finish</button>\r\n);\r\n//button to see next move in solution\r\nconst nextButton = (f) =>  (\r\n    <button className=\"btn btn-sm btn-warning mx-2\" onClick={f}>Next</button>\r\n);\r\n// button to see previous move in solution\r\nconst prevButton = (f) =>  (\r\n    <button className=\"btn btn-sm btn-danger mr-2\" onClick={f} id=\"prev-btn\">Prev</button>\r\n);\r\n// button for running script to solve board\r\nconst solveButton = (f) =>  (\r\n    <button className=\"btn btn-sm btn-primary ml-2\" onClick={f}>Solve!</button>\r\n);\r\n\r\nfunction Buttons(props) {\r\n    // buttons displayed after solve button is pressed\r\n    if (props.state === \"solved\") {\r\n        return (\r\n            <div className=\"text-center mt-2\">\r\n                {prevButton(props.onPrev)}\r\n                {nextButton(props.onNext)}\r\n                {finishButton(props.onFinish)}\r\n            </div>\r\n        );\r\n    // buttons displayed when board is cleared of blocks\r\n    } else if (props.state === \"cleared\"){\r\n        return (\r\n            <div className=\"text-center mt-2\">\r\n                {defaultButton(props.onDefault)}\r\n                {solveButton(props.onSolve)}\r\n            </div>\r\n        );\r\n    // buttons displayed when default board is shown\r\n    // or after blocks have been dropped\r\n    } else if (props.state === \"default\" || props.state === \"blocksAdded\") {\r\n        return (\r\n            <div className=\"text-center mt-2\">\r\n                {clearButton(props.onClear)}\r\n                {solveButton(props.onSolve)}\r\n            </div>\r\n        );\r\n    // buttons displayed after last solution move is seen\r\n    // or under any other circumstances\r\n    } else {\r\n        return <></>;\r\n    }\r\n}\r\n\r\nexport default Buttons;\r\n\r\n","enum Dir { Left, Right, Up, Down }\r\n\r\nfunction oppositeDir(dir: Dir): Dir {\r\n    // for a given direction, return its opposites\r\n    if (dir === Dir.Left) return Dir.Right;\r\n    else if (dir === Dir.Right) return Dir.Left;\r\n    else if (dir === Dir.Up) return Dir.Down;\r\n    else return Dir.Up;\r\n}\r\n\r\nfunction oppositeDirs(dirs: Array<Dir>): Array<Dir> {\r\n    // for a list of directions, return a reversed list of the opposites \r\n    // of these directions\r\n    let numDirs: number = dirs.length;\r\n    let res: Array<Dir> = new Array<Dir>(numDirs);\r\n    for (let i: number = 0; i < numDirs; i++) {\r\n        res[numDirs-i-1] = oppositeDir(dirs[i]);\r\n    }\r\n    return res;\r\n}\r\n\r\ninterface Block {\r\n    readonly numRows: number;\r\n    readonly numCols: number;\r\n    rowPos: number;\r\n    colPos: number;\r\n}\r\n\r\nfunction cloneBlock(block: Block): Block {\r\n    return ({\r\n        rowPos: block.rowPos,\r\n        colPos: block.colPos,\r\n        numRows: block.numRows,\r\n        numCols: block.numCols\r\n    });\r\n}\r\n\r\ninterface Move {\r\n    readonly block: Block;\r\n    readonly dirs: Array<Dir>;\r\n}\r\n\r\n\r\nfunction moveBlock(block: Block, dirs: Array<Dir>): void {\r\n    // for each direction in a direction list, update the block \r\n    // positioning accordingly\r\n    for (let dir of dirs) {\r\n        if (dir === Dir.Left) block.colPos--;\r\n        else if (dir === Dir.Right) block.colPos++;\r\n        else if (dir === Dir.Up) block.rowPos--;\r\n        else block.rowPos++;\r\n    }\r\n    return;\r\n}\r\n\r\nfunction equivalentBlocks(b1: Block, b2: Block): boolean {\r\n    // return a boolean value representing whether two blocks are equivalent\r\n    return (\r\n        b1.rowPos === b2.rowPos && \r\n        b1.colPos === b2.colPos &&\r\n        b1.numRows === b2.numRows && \r\n        b1.numCols === b2.numCols\r\n    );\r\n}\r\n\r\n\r\nclass Board {\r\n    // ATTRIBUTES\r\n    private _cells: Array<Array<Block | null>> = [\r\n        [null, null, null, null],\r\n        [null, null, null, null],\r\n        [null, null, null, null],\r\n        [null, null, null, null],\r\n        [null, null, null, null],\r\n    ];\r\n    readonly blocks: Array<Block>;\r\n    readonly winningCol: number; \r\n    readonly winningRow: number; \r\n\r\n    // METHODS\r\n    private insertBlocks(): void {\r\n        // for each block, ensure that all board cells to be covered by the \r\n        // block are free; if so, place `block` in all covered cells.\r\n        let fourBlock: boolean = false;\r\n        let coveredCells: number = 0;\r\n        for (let block of this.blocks) {\r\n            if (block.numRows*block.numCols === 4 && !fourBlock) fourBlock = true; \r\n            else if (block.numRows*block.numCols === 4) throw new Error(\"There must be exacly one block of size 4\");\r\n            for (let i: number = block.rowPos; i < block.rowPos + block.numRows; i++) {\r\n                for (let j: number = block.colPos; j < block.colPos + block.numCols; j++) {\r\n                    if (this._cells[i][j] === null) {\r\n                        this._cells[i][j] = block;\r\n                        coveredCells++;\r\n                    } else {\r\n                        throw new Error(\"Invalid block positioning\");\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (coveredCells !== 18) throw new Error(\"There must be exactly two free spaces\");\r\n        if (!fourBlock) throw new Error(\"There must be exactly one block of size 4\");\r\n    }\r\n    private currentDirs(block: Block): Array<Dir> {\r\n        // for a given block return a list of directions corresponding \r\n        // to open moves\r\n        let dirs: Array<Dir> = new Array<Dir>();\r\n        let left: boolean = true;\r\n        let right: boolean = true;\r\n        let up: boolean = true;\r\n        let down: boolean = true;\r\n        // check horizontal moves\r\n        for (let row: number = block.rowPos; row < block.rowPos + block.numRows; row++) {\r\n            // Left\r\n            let col: number = block.colPos;\r\n            if (left && (col < 1 || this._cells[row][col-1] !== null)) left = false;\r\n            // Right\r\n            col = block.colPos + block.numCols - 1;\r\n            if (right && (col > 2 || this._cells[row][col+1] !== null)) right = false;\r\n        }\r\n        // check vertical moves\r\n        for (let col: number = block.colPos; col < block.colPos + block.numCols; col++) {\r\n            // Up\r\n            let row: number = block.rowPos;\r\n            if (up && (row < 1 || this._cells[row-1][col] !== null)) up = false;\r\n            // Down\r\n            row = block.rowPos + block.numRows - 1;\r\n            if (down && (row > 3 || this._cells[row+1][col] !== null)) down = false;\r\n        }\r\n        // Push valid directions to result list\r\n        if (left) dirs.push(Dir.Left);\r\n        if (right) dirs.push(Dir.Right);\r\n        if (up) dirs.push(Dir.Up);\r\n        if (down) dirs.push(Dir.Down);\r\n        return dirs;\r\n    }\r\n    private makeMove(block: Block, dirs: Array<Dir>): void {\r\n        // for each direction in a given list of directions and a block, \r\n        // move the block and update the `_cells` matrix\r\n        let numRows: number = block.numRows;\r\n        let numCols: number = block.numCols;\r\n        for (let dir of dirs) {\r\n            let initRowPos: number = block.rowPos;\r\n            let initColPos: number = block.colPos;\r\n            moveBlock(block, [dir]); // update block positions\r\n            // update `_cells` for left or up moves\r\n            if (dir === Dir.Left|| dir === Dir.Up) {\r\n                for (let i: number = initRowPos; i < initRowPos + numRows; i++) {\r\n                    for (let j: number = initColPos; j < initColPos + numCols; j++) {\r\n                        if (dir === Dir.Left) this._cells[i][j-1] = block;\r\n                        else this._cells[i-1][j] = block;\r\n                        this._cells[i][j] = null;\r\n                    }\r\n                }\r\n            // update `_cells` for right or down moves\r\n            } else {\r\n                for (let i: number = initRowPos + numRows - 1; i >= initRowPos; i--) {\r\n                    for (let j: number = initColPos + numCols - 1; j >= initColPos; j--) {\r\n                        if (dir === Dir.Right) this._cells[i][j+1] = block;\r\n                        else this._cells[i+1][j] = block;\r\n                        this._cells[i][j] = null;\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n    private findMoves(block: Block): Array<Array<Dir>> {\r\n        // given a block, find each available direction, and then from each of these,\r\n        // find the set of new available directions that are not steps backward, \r\n        // and return a list of the valid direction paths\r\n        let res: Array<Array<Dir>> = new Array<Array<Dir>>();\r\n        for (let initDir of this.currentDirs(block)) {\r\n            res.push([initDir]); // push initial directions to result\r\n            this.makeMove(block, [initDir]); // move block\r\n            // find next directions\r\n            for (let nextDir of this.currentDirs(block)) {\r\n                // ensure next direction is not a move backward\r\n                if (nextDir !== oppositeDir(initDir)) {\r\n                    let newDirs: Array<Dir> = [initDir, nextDir];\r\n                    res.push(newDirs); // push new list of two directions to result\r\n                }\r\n            }\r\n            this.makeMove(block, oppositeDirs([initDir])); // unMove block\r\n        }\r\n        return res;\r\n    }\r\n    getMoves(): Array<Move> {\r\n        // for each block, find all valid move paths and push\r\n        // the corresponding Move objects to the `moves` array\r\n        let res: Array<Move> = new Array<Move>();\r\n        for (let block of this.blocks) {\r\n            for (let dirs of this.findMoves(block)) {\r\n                // clone move block\r\n                let newBlock: Block = cloneBlock(block);\r\n                // add move to result list\r\n                res.push({\r\n                    block: newBlock, \r\n                    dirs: dirs\r\n                });\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n    getHash(): string {\r\n        // walk through `_cells` matrix, convert blocks to simple strings, and\r\n        // concatenate them into the `hash` string\r\n        let res: string = \"\";\r\n        for (let i: number = 0; i < 5; i++) {\r\n            for (let j: number  = 0; j < 4; j++) {\r\n                let block: Block | null = this._cells[i][j];\r\n                if (block === null) {\r\n                    res += \"0\";\r\n                } else if ( block.numRows*block.numCols === 2) {\r\n                    res += (block.numRows === 1 ? \"2H\" : \"2V\");\r\n                } else {\r\n                    res += (block.numRows*block.numCols).toString();\r\n                } \r\n            }\r\n        }\r\n        return res;\r\n    }\r\n    isSolved(): boolean {\r\n        let winningBlock: Block | null = this._cells[this.winningRow][this.winningCol];\r\n        if (winningBlock !== null) {\r\n            return (\r\n                winningBlock.rowPos === this.winningRow && \r\n                winningBlock.colPos === this.winningCol &&\r\n                winningBlock.numRows*winningBlock.numCols === 4\r\n            );\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // CONSTRUCTOR \r\n    constructor(blocks_: Array<Block>, winningRow_: number, winningCol_: number) {\r\n        this.winningRow = winningRow_;\r\n        this.winningCol = winningCol_;\r\n        this.blocks = blocks_;\r\n        this.insertBlocks();\r\n    }\r\n}\r\n\r\n\r\nfunction cloneBoard(board: Board, move: Move): Board {\r\n    // function to generate a new board following a move\r\n    let blocks: Array<Block> = new Array<Block>();\r\n    for (let block of board.blocks) {\r\n        let newBlock: Block = cloneBlock(block);\r\n        if (equivalentBlocks(newBlock, move.block)) {\r\n            moveBlock(newBlock, move.dirs);\r\n        }\r\n        blocks.push(newBlock);\r\n    }\r\n    let newBoard: Board = new Board(blocks, board.winningRow, board.winningCol);\r\n    return newBoard;\r\n}\r\n\r\n\r\nclass TreeNode {\r\n    // ATTRIBUTES\r\n    readonly board: Board;\r\n    readonly parent: TreeNode | null;\r\n    readonly headDist: number = 0;\r\n\r\n    // METHODS\r\n    getChildren(hashes: Set<string>): Array<TreeNode> {\r\n        let children: Array<TreeNode> = new Array<TreeNode>();\r\n        for (let move of this.board.getMoves()) {\r\n            let childBoard: Board = cloneBoard(this.board, move);\r\n            let childHash: string = childBoard.getHash();\r\n            if (!hashes.has(childHash)) {\r\n                hashes.add(childHash);\r\n                let child: TreeNode = new TreeNode(childBoard, this);\r\n                children.push(child);\r\n            }\r\n        }\r\n        return children;\r\n    }\r\n\r\n    // CONSTRUCTOR\r\n    constructor(board_: Board, parent_: TreeNode | null) {\r\n        this.board = board_;\r\n        this.parent = parent_;\r\n        if (this.parent !== null) this.headDist = this.parent.headDist + 1;\r\n    }\r\n}\r\n\r\n\r\nclass Solver {\r\n    // ATTRIBUTES\r\n    head: TreeNode;\r\n    tail: TreeNode | null = null;\r\n\r\n    // METHODS\r\n    solve(): void {\r\n        // TO-DO\r\n        let hashes: Set<string> = new Set<string>();\r\n        let queue: Array<TreeNode> = new Array<TreeNode>();\r\n        queue.push(this.head); // add the head node to queue\r\n        hashes.add(this.head.board.getHash()); // add the head node board hash to set\r\n        // BFS board configurations until a winning board is found\r\n        while (queue.length > 0) {\r\n            let top: TreeNode | undefined = queue.shift();\r\n            if (top !== undefined) {\r\n                if (top.board.isSolved()) {\r\n                    this.tail = top;\r\n                    return;\r\n                }\r\n                for (let child of top.getChildren(hashes)) queue.push(child);\r\n            }\r\n        }\r\n        return;\r\n    }\r\n    getBoards(): Array<Array<Block>> {\r\n        if (this.tail === null) {\r\n            return [];\r\n        } else {\r\n            let res: Array<Array<Block>> = new Array<Array<Block>>(this.tail.headDist);\r\n            let node: TreeNode | null = this.tail;\r\n            while (node !== null) {\r\n                res[node.headDist-1] = node.board.blocks;\r\n                node = node.parent;\r\n            }\r\n            return res;\r\n        }\r\n    }\r\n    // CONSTRUCTOR\r\n    constructor(blocks: Array<Block>, winningRow: number, winningCol: number) {\r\n        this.head = new TreeNode(new Board(blocks, winningRow, winningCol), null);\r\n    }\r\n}\r\n\r\nexport default Solver;","import React from 'react';\r\nimport '../styles/DraggableBlock.css';\r\n\r\nclass DraggableBlock extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      rel: null,\r\n      pos: { left: 0, top: 0}\r\n    };\r\n    this.click = this.click.bind(this);\r\n    this.move = this.move.bind(this);\r\n    this.drop = this.drop.bind(this);\r\n  }\r\n\r\n  // function called on mouse down on a draggable block\r\n  click(e) {\r\n    if (e.button !== 0) return\r\n    const currPos = e.currentTarget.getBoundingClientRect();\r\n    this.setState(() => ({\r\n      rel: {\r\n        left: currPos.left,\r\n        top: currPos.top\r\n      }\r\n    }));\r\n    document.addEventListener(\"mousemove\", this.move); // listen for mouse move\r\n    document.addEventListener(\"mouseup\", this.drop); // listen for mouse up (drop)\r\n    this.props.onDragFunc(e.currentTarget.id); // send content the current block's ID\r\n    e.stopPropagation();\r\n    e.preventDefault();\r\n  }\r\n  \r\n  // function called on mouse move after mouse down on a draggable block\r\n  move(e) {\r\n    const x = e.pageX;\r\n    const y = e.pageY;\r\n    this.setState((state) => ({\r\n      pos: {\r\n        left: x - state.rel.left,\r\n        top: y - state.rel.top\r\n      }\r\n    }));\r\n    e.stopPropagation();\r\n    e.preventDefault();\r\n  }\r\n\r\n  // function called on mouse up after mouse down on a draggable block\r\n  drop(e) {\r\n    this.setState(() => ({\r\n      rel: null,\r\n      pos: {left: 0, top: 0}\r\n    }));\r\n    document.removeEventListener(\"mousemove\", this.move);\r\n    document.removeEventListener(\"mouseup\", this.drop);\r\n    e.stopPropagation();\r\n    e.preventDefault();\r\n  }\r\n\r\n  render() {\r\n    // dragblock vars\r\n    const steez = {\r\n      position: \"relative\",\r\n      left: this.state.pos.left + \"px\",\r\n      top: this.state.pos.top + \"px\"\r\n    };\r\n    const oneblockString  = \"draggable-oneblock  draggable m-2 p-0 bg-success border border-dark rounded\";\r\n    const twoblockHString = \"draggable-twoblockH draggable m-2 p-0 bg-warning border border-dark rounded\";\r\n    const twoblockVString = \"draggable-twoblockV draggable m-2 p-0 bg-primary border border-dark rounded\";\r\n    const fourblockString = \"draggable-fourblock draggable m-2 p-0 bg-danger  border border-dark rounded\";\r\n    let classString = \"\";\r\n    // check block size\r\n    if (this.props.size === 4) classString = fourblockString;\r\n    else if (this.props.size === 2 && this.props.block.numCols === 1) classString = twoblockVString;\r\n    else if (this.props.size === 2) classString = twoblockHString;\r\n    else if (this.props.size === 1) classString = oneblockString;\r\n    else alert(\"Invalid draggable block properties\");\r\n    // return dragblock\r\n    return (\r\n      <div className={classString}\r\n        id={this.props.id}\r\n        style={steez}\r\n        onMouseDown={this.click}>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DraggableBlock;","import React from 'react';\r\nimport DraggableBlock from './DraggableBlock';\r\n\r\nconst oneBlock = (f) => (  \r\n    <DraggableBlock size={1} id=\"1,1\" onDragFunc={f} /> \r\n);\r\nconst fourBlock = (f) => ( \r\n    <DraggableBlock size={4} id=\"2,2\" onDragFunc={f} /> \r\n);\r\nconst twoBlockV = (f) => ( \r\n    <DraggableBlock size={2} id=\"2,1\" onDragFunc={f} block={{ numRows: 2, numCols: 1 }} /> \r\n);\r\nconst twoBlockH = (f) => ( \r\n    <DraggableBlock size={2} id=\"1,2\" onDragFunc={f} block={{ numRows: 1, numCols: 2 }} /> \r\n);\r\n\r\nconst toolbarBlocks = (f) => (\r\n    <div className=\"col-12 mt-2\">\r\n        <div className=\"row justify-content-center\">\r\n            {fourBlock(f)}        \r\n            {twoBlockV(f)}        \r\n            {twoBlockH(f)}        \r\n            {oneBlock(f)}        \r\n        </div>\r\n    </div>\r\n);\r\n\r\nlet Toolbar = (props) => (\r\n    // only show toolbar when board is cleared or blocks are being added\r\n    (props.show)\r\n    ? toolbarBlocks(props.onDragFunc)\r\n    : <></>\r\n);\r\n\r\nexport default Toolbar;","import React from 'react';\r\nimport Alert from './Alert';\r\nimport Board from './Board';\r\nimport Buttons from './Buttons';\r\nimport Toolbar from './Toolbar';\r\nimport Solver from '../solver.ts';\r\nimport '../styles/global.css';\r\n\r\nconst boardRows = 5;\r\nconst boardCols = 4;\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      blocks: [],\r\n      currState: \"cleared\",\r\n      displayText: \"Klotski Solver\",\r\n      dragBlock: null,\r\n      winningRow: 3,\r\n      winningCol: 1\r\n    };\r\n\r\n    this.addBlock = this.addBlock.bind(this);\r\n    this.clear = this.clear.bind(this);\r\n    this.default = this.default.bind(this);\r\n    this.dragBlockInfo = this.dragBlockInfo.bind(this);\r\n    this.finish = this.finish.bind(this);\r\n    this.next = this.next.bind(this);\r\n    this.prev = this.prev.bind(this);\r\n    this.restart = this.restart.bind(this);\r\n    this.setWinningPos = this.setWinningPos.bind(this);\r\n    this.solve = this.solve.bind(this);\r\n  }\r\n  \r\n\r\n  // BUTTON STATE FUNCTIONS\r\n\r\n\r\n  // Function passed to the Buttons component that updates the Content\r\n  // cleared state property when a user clicks the clear button.\r\n  clear() {\r\n    this.setState(() => ({\r\n      blocks: [],\r\n      currState: \"cleared\",\r\n      displayText: \"Klotski Solver\",\r\n      dragBlock: null,\r\n      winningRow: 3,\r\n      winningCol: 1\r\n    }));\r\n  }\r\n  // Function passed to the Buttons component that updates the Content\r\n  // default state property when a user clicks the default button.\r\n  default() {\r\n    const defaultBlocks = [\r\n      { rowPos: 0, colPos: 0, numRows: 2, numCols: 1 },\r\n      { rowPos: 0, colPos: 1, numRows: 2, numCols: 2 },\r\n      { rowPos: 0, colPos: 3, numRows: 2, numCols: 1 },\r\n      { rowPos: 2, colPos: 0, numRows: 2, numCols: 1 },\r\n      { rowPos: 2, colPos: 1, numRows: 1, numCols: 2 },\r\n      { rowPos: 2, colPos: 3, numRows: 2, numCols: 1 },\r\n      { rowPos: 3, colPos: 1, numRows: 1, numCols: 1 },\r\n      { rowPos: 3, colPos: 2, numRows: 1, numCols: 1 },\r\n      { rowPos: 4, colPos: 0, numRows: 1, numCols: 1 },\r\n      { rowPos: 4, colPos: 3, numRows: 1, numCols: 1 }\r\n    ]\r\n    this.setState(() => ({\r\n      blocks: defaultBlocks,\r\n      currState: \"default\",\r\n      winningRow: 3,\r\n      winningCol: 1\r\n    }));\r\n  }\r\n\r\n\r\n  // DRAG-N-DROP FUNCTIONS\r\n\r\n\r\n  // Function passed to the Board component that updates the Content\r\n  // blocksAdded state property when a user adds a block to the board.\r\n  addBlock(newBlocks) {\r\n    this.setState(() => ({\r\n      blocks: newBlocks,\r\n      currState: \"blocksAdded\",\r\n    }))\r\n  }\r\n  // Function passed to the Toolbar component (onDragFunc) which alerts the Content\r\n  // component when a DraggableBlock is being dragged and send the block's \r\n  // corresponding ID which contains the block's numRows and numCols properties.\r\n  // This information is used to update the Content dragBlock state property, which\r\n  // is passed to the Board component.\r\n  dragBlockInfo(id) {\r\n    this.setState(() => ({\r\n      dragBlock: {\r\n        numRows: parseInt(id.split(\",\")[0]),\r\n        numCols: parseInt(id.split(\",\")[1])\r\n      }\r\n    }));\r\n  }\r\n\r\n\r\n  // BOARD SOLVING FUNCTIONS\r\n\r\n\r\n  // function for clearing the board after the solution is finished\r\n  restart() {\r\n    const clearFunc = this.clear;\r\n    setTimeout(\r\n      function () {clearFunc()},\r\n      3000\r\n    );\r\n  }\r\n  // Function passed to the Buttons component that updates the Content\r\n  // boards and blocks state properties when a user clicks the next button.\r\n  next() {\r\n    if (this.state.boards.length === 0) return;\r\n    if (this.state.boardIdx === this.state.boards.length-1) {\r\n      this.setState(() => ({\r\n        currState: \"finished\",\r\n        displayText: \"You Win!\"\r\n      }));\r\n      this.restart();    \r\n    } else {\r\n      this.setState((state) => ({\r\n        blocks: state.boards[state.boardIdx + 1],\r\n        boardIdx: state.boardIdx + 1,\r\n        displayText: \"Move \" + (state.boardIdx+2).toString()\r\n      }));\r\n    }\r\n  }\r\n  // Function passed to the Buttons component that updates the Content\r\n  // boards and blocks state properties when a user clicks the prev button.\r\n  prev() {\r\n    if (this.state.boards.length === 0 || this.state.boardIdx === -1) return;\r\n    this.setState(state => ({\r\n      blocks: state.boards[state.boardIdx - 1],\r\n      boardIdx: state.boardIdx - 1,\r\n      displayText: (state.boardIdx <= 0 ? \"Klotski Solver\" : \"Move \" + state.boardIdx.toString())\r\n    }));\r\n  }\r\n  // Function passed to the Buttons component that updates the Content\r\n  // boards and blocks state properties when a user clicks the next button.\r\n  finish() {\r\n    this.setState(() => ({ currState: \"finished\" }));\r\n    // repeat calls to next with a .5 second interval\r\n    const callFunc = this.next;\r\n    const n = this.state.boards.length;\r\n    let i = this.state.boardIdx;\r\n    var repeater = setInterval( \r\n      function () {\r\n        if (i < n) {\r\n          callFunc();\r\n          i++;\r\n        } else {\r\n          clearInterval(repeater);\r\n        }\r\n      }, 250\r\n    );\r\n  }\r\n  // Function passed to the Buttons component that updates the Content\r\n  // solved state property when a user clicks the solve button.\r\n  solve() {\r\n    try {\r\n      var s = new Solver(\r\n        this.state.blocks, \r\n        this.state.winningRow, \r\n        this.state.winningCol\r\n      );\r\n      s.solve();\r\n    } catch (err) {\r\n      alert(err);\r\n      return;\r\n    }\r\n    this.setState(() => ({ currState: \"solved\" }));\r\n    const solutionMoves = s.getBoards();\r\n    const numMoves = solutionMoves.length;\r\n    if (numMoves === 0) {\r\n      this.setState(() => ({displayText: \"No Solution Found :(\" }));\r\n      this.restart();\r\n    } else {\r\n      this.setState(() => ({\r\n        displayText: \"Solution of Length \" + numMoves.toString() + \" Found!\",\r\n        boards: solutionMoves,\r\n        boardIdx: -1\r\n      }));\r\n    }\r\n  }\r\n\r\n  // function sent to BoardCell for moving the winning position\r\n  setWinningPos(e) {\r\n    const id = e.currentTarget.id;\r\n    const winRow = parseInt(id.split(\",\")[0]);\r\n    const winCol = parseInt(id.split(\",\")[1]);\r\n    if (winRow < boardRows - 1 && winCol < boardCols - 1) {\r\n      if (this.state.currState === \"cleared\") {\r\n        this.setState(() => ({\r\n          winningRow: winRow,\r\n          winningCol: winCol \r\n        }));\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const header = (\r\n      <header className=\"h1 text-center mt-1 mb-0\">\r\n        {this.state.displayText}\r\n      </header>\r\n    );\r\n    const footer = (\r\n      <footer className=\"mt-5 text-center text-secondary\">\r\n        © Sam Royall. All Rights Reserved.\r\n      </footer>\r\n    );\r\n    let showToolbar = (\r\n      this.state.currState === \"cleared\" ||\r\n      this.state.currState === \"blocksAdded\"\r\n    );\r\n\r\n    return (\r\n      <>\r\n        <Alert />\r\n        {header} \r\n        <div className=\"row justify-content-center px-0 mx-0\">\r\n          <div className=\"col-3 board\">\r\n            <Board blocks={this.state.blocks}\r\n              dragBlock={this.state.dragBlock}\r\n              winningRow={this.state.winningRow}\r\n              winningCol={this.state.winningCol}\r\n              onAddBlock={this.addBlock}\r\n              onWinPosChange={this.setWinningPos}\r\n            />\r\n            <Buttons state={this.state.currState}\r\n              onClear={this.clear}\r\n              onDefault={this.default}\r\n              onFinish={this.finish}\r\n              onNext={this.next}\r\n              onPrev={this.prev}\r\n              onSolve={this.solve}\r\n            />\r\n          </div>\r\n          <Toolbar \r\n            show={showToolbar}\r\n            onDragFunc={this.dragBlockInfo}\r\n          />\r\n        </div>\r\n        {footer} \r\n      </>\r\n    );   \r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}