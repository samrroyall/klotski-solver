{"version":3,"sources":["solver.ts","App.js","index.js"],"names":["Dir","oppositeDir","dir","Left","Right","Up","Down","oppositeDirs","dirs","numDirs","length","res","Array","i","cloneBlock","block","rowPos","colPos","numRows","numCols","moveBlock","Board","blocks_","winningRow_","winningCol_","_cells","blocks","winningCol","winningRow","this","insertBlocks","fourBlock","coveredCells","Error","j","left","right","up","down","row","col","push","initRowPos","initColPos","currentDirs","initDir","makeMove","nextDir","newDirs","findMoves","newBlock","toString","winningBlock","cloneBoard","board","move","b1","b2","TreeNode","board_","parent_","parent","headDist","hashes","children","getMoves","childBoard","childHash","getHash","has","add","child","Solver","head","tail","Set","queue","top","shift","undefined","isSolved","getChildren","node","BoardBlock","props","twoblockV","twoblockH","fourblock","classString","size","currRow","currCol","alert","className","id","onMouseUp","onDropFunc","onMouseDown","onClickFunc","BoardCell","click","e","parseInt","split","winCell","cell","winRow","winCol","key","BoardRow","cells","map","val","onDrop","dragBlock","currentTarget","maxRow","maxCol","boardRows","boardCols","newBlocks","t1","l1","r1","t2","l2","r2","onAddBlock","checkBlock","tempRow","tempCell","b","lastCol","lastRow","r","c","getBlocks","moveWinPos","DraggableBlock","state","rel","pos","bind","drop","button","currPos","getBoundingClientRect","setState","document","addEventListener","onDragFunc","stopPropagation","preventDefault","x","pageX","y","pageY","removeEventListener","steez","position","style","React","Component","Toolbar","show","Buttons","clearButton","onClick","onClear","defaultButton","onDefault","finishButton","onFinish","nextButton","onNext","prevButton","onPrev","solveButton","onSolve","Content","currState","displayText","blocksAdded","clear","default","dragBlockInfo","finish","next","prev","restart","setWinningPos","solve","initialBlocks","clearFunc","setTimeout","boards","boardIdx","n","callFunction","repeater","setInterval","clearInterval","console","log","s","solutionMoves","getBoards","numMoves","err","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.0a80ef7f.chunk.js","sourcesContent":["enum Dir { Left, Right, Up, Down }\r\n\r\nfunction oppositeDir(dir: Dir): Dir {\r\n    // for a given direction, return its opposites\r\n    if (dir === Dir.Left) return Dir.Right;\r\n    else if (dir === Dir.Right) return Dir.Left;\r\n    else if (dir === Dir.Up) return Dir.Down;\r\n    else return Dir.Up;\r\n}\r\n\r\nfunction oppositeDirs(dirs: Array<Dir>): Array<Dir> {\r\n    // for a list of directions, return a reversed list of the opposites \r\n    // of these directions\r\n    let numDirs: number = dirs.length;\r\n    let res: Array<Dir> = new Array<Dir>(numDirs);\r\n    for (let i: number = 0; i < numDirs; i++) {\r\n        res[numDirs-i-1] = oppositeDir(dirs[i]);\r\n    }\r\n    return res;\r\n}\r\n\r\ninterface Block {\r\n    readonly numRows: number;\r\n    readonly numCols: number;\r\n    rowPos: number;\r\n    colPos: number;\r\n}\r\n\r\nfunction cloneBlock(block: Block): Block {\r\n    return ({\r\n        rowPos: block.rowPos,\r\n        colPos: block.colPos,\r\n        numRows: block.numRows,\r\n        numCols: block.numCols\r\n    });\r\n}\r\n\r\ninterface Move {\r\n    readonly block: Block;\r\n    readonly dirs: Array<Dir>;\r\n}\r\n\r\n\r\nfunction moveBlock(block: Block, dirs: Array<Dir>): void {\r\n    // for each direction in a direction list, update the block \r\n    // positioning accordingly\r\n    for (let dir of dirs) {\r\n        if (dir === Dir.Left) block.colPos--;\r\n        else if (dir === Dir.Right) block.colPos++;\r\n        else if (dir === Dir.Up) block.rowPos--;\r\n        else block.rowPos++;\r\n    }\r\n    return;\r\n}\r\n\r\nfunction equivalentBlocks(b1: Block, b2: Block): boolean {\r\n    // return a boolean value representing whether two blocks are equivalent\r\n    return (\r\n      b1.rowPos === b2.rowPos && \r\n      b1.colPos === b2.colPos &&\r\n      b1.numRows === b2.numRows && \r\n      b1.numCols === b2.numCols\r\n    );\r\n}\r\n\r\n\r\nclass Board {\r\n    // ATTRIBUTES\r\n    private _cells: Array<Array<Block | null>> = [\r\n        [null, null, null, null],\r\n        [null, null, null, null],\r\n        [null, null, null, null],\r\n        [null, null, null, null],\r\n        [null, null, null, null],\r\n    ];\r\n    readonly blocks: Array<Block>;\r\n    readonly winningCol: number; \r\n    readonly winningRow: number; \r\n\r\n    // METHODS\r\n    private insertBlocks(): void {\r\n        // for each block, ensure that all board cells to be covered by the \r\n        // block are free; if so, place `block` in all covered cells.\r\n        let fourBlock: boolean = false;\r\n        let coveredCells: number = 0;\r\n        for (let block of this.blocks) {\r\n            if (block.numRows*block.numCols === 4 && !fourBlock) fourBlock = true; \r\n            else if (block.numRows*block.numCols === 4) throw new Error(\"There must be exacly one block of size 4\");\r\n            for (let i: number = block.rowPos; i < block.rowPos + block.numRows; i++) {\r\n                for (let j: number = block.colPos; j < block.colPos + block.numCols; j++) {\r\n                    if (this._cells[i][j] === null) {\r\n                        this._cells[i][j] = block;\r\n                        coveredCells++;\r\n                    } else {\r\n                        throw new Error(\"Invalid block positioning\");\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (coveredCells !== 18) throw new Error(\"There must be exactly two free spaces\");\r\n        if (!fourBlock) throw new Error(\"There must be exactly one block of size 4\");\r\n    }\r\n    private currentDirs(block: Block): Array<Dir> {\r\n        // for a given block return a list of directions corresponding \r\n        // to open moves\r\n        let dirs: Array<Dir> = new Array<Dir>();\r\n        let left: boolean = true;\r\n        let right: boolean = true;\r\n        let up: boolean = true;\r\n        let down: boolean = true;\r\n        // check horizontal moves\r\n        for (let row: number = block.rowPos; row < block.rowPos + block.numRows; row++) {\r\n            // Left\r\n            let col: number = block.colPos;\r\n            if (left && (col < 1 || this._cells[row][col-1] !== null)) left = false;\r\n            // Right\r\n            col = block.colPos + block.numCols - 1;\r\n            if (right && (col > 2 || this._cells[row][col+1] !== null)) right = false;\r\n        }\r\n        // check vertical moves\r\n        for (let col: number = block.colPos; col < block.colPos + block.numCols; col++) {\r\n            // Up\r\n            let row: number = block.rowPos;\r\n            if (up && (row < 1 || this._cells[row-1][col] !== null)) up = false;\r\n            // Down\r\n            row = block.rowPos + block.numRows - 1;\r\n            if (down && (row > 3 || this._cells[row+1][col] !== null)) down = false;\r\n        }\r\n        // Push valid directions to result list\r\n        if (left) dirs.push(Dir.Left);\r\n        if (right) dirs.push(Dir.Right);\r\n        if (up) dirs.push(Dir.Up);\r\n        if (down) dirs.push(Dir.Down);\r\n        return dirs;\r\n    }\r\n    private makeMove(block: Block, dirs: Array<Dir>): void {\r\n        // for each direction in a given list of directions and a block, \r\n        // move the block and update the `_cells` matrix\r\n        let numRows: number = block.numRows;\r\n        let numCols: number = block.numCols;\r\n        for (let dir of dirs) {\r\n            let initRowPos: number = block.rowPos;\r\n            let initColPos: number = block.colPos;\r\n            moveBlock(block, [dir]); // update block positions\r\n            // update `_cells` for left or up moves\r\n            if (dir === Dir.Left|| dir === Dir.Up) {\r\n                for (let i: number = initRowPos; i < initRowPos + numRows; i++) {\r\n                    for (let j: number = initColPos; j < initColPos + numCols; j++) {\r\n                        if (dir === Dir.Left) this._cells[i][j-1] = block;\r\n                        else this._cells[i-1][j] = block;\r\n                        this._cells[i][j] = null;\r\n                    }\r\n                }\r\n            // update `_cells` for right or down moves\r\n            } else {\r\n                for (let i: number = initRowPos + numRows - 1; i >= initRowPos; i--) {\r\n                    for (let j: number = initColPos + numCols - 1; j >= initColPos; j--) {\r\n                        if (dir === Dir.Right) this._cells[i][j+1] = block;\r\n                        else this._cells[i+1][j] = block;\r\n                        this._cells[i][j] = null;\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n    private findMoves(block: Block): Array<Array<Dir>> {\r\n        // given a block, find each available direction, and then from each of these,\r\n        // find the set of new available directions that are not steps backward, \r\n        // and return a list of the valid direction paths\r\n        let res: Array<Array<Dir>> = new Array<Array<Dir>>();\r\n        for (let initDir of this.currentDirs(block)) {\r\n            res.push([initDir]); // push initial directions to result\r\n            this.makeMove(block, [initDir]); // move block\r\n            // find next directions\r\n            for (let nextDir of this.currentDirs(block)) {\r\n                // ensure next direction is not a move backward\r\n                if (nextDir !== oppositeDir(initDir)) {\r\n                    let newDirs: Array<Dir> = [initDir, nextDir];\r\n                    res.push(newDirs); // push new list of two directions to result\r\n                }\r\n            }\r\n            this.makeMove(block, oppositeDirs([initDir])); // unMove block\r\n        }\r\n        return res;\r\n    }\r\n    getMoves(): Array<Move> {\r\n        // for each block, find all valid move paths and push\r\n        // the corresponding Move objects to the `moves` array\r\n        let res: Array<Move> = new Array<Move>();\r\n        for (let block of this.blocks) {\r\n            for (let dirs of this.findMoves(block)) {\r\n                // clone move block\r\n                let newBlock: Block = cloneBlock(block);\r\n                // add move to result list\r\n                res.push({\r\n                    block: newBlock, \r\n                    dirs: dirs\r\n                });\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n    getHash(): string {\r\n        // walk through `_cells` matrix, convert blocks to simple strings, and\r\n        // concatenate them into the `hash` string\r\n        let res: string = \"\";\r\n        for (let i: number = 0; i < 5; i++) {\r\n            for (let j: number  = 0; j < 4; j++) {\r\n                let block: Block | null = this._cells[i][j];\r\n                if (block === null) {\r\n                    res += \"0\";\r\n                } else if ( block.numRows*block.numCols === 2) {\r\n                    res += (block.numRows === 1 ? \"2H\" : \"2V\");\r\n                } else {\r\n                    res += (block.numRows*block.numCols).toString();\r\n                } \r\n            }\r\n        }\r\n        return res;\r\n    }\r\n    isSolved(): boolean {\r\n        let winningBlock: Block | null = this._cells[this.winningRow][this.winningCol];\r\n        if (winningBlock !== null) {\r\n            return (\r\n                winningBlock.rowPos === this.winningRow && \r\n                winningBlock.colPos === this.winningCol &&\r\n                winningBlock.numRows*winningBlock.numCols === 4\r\n            );\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // CONSTRUCTOR \r\n    constructor(blocks_: Array<Block>, winningRow_: number, winningCol_: number) {\r\n        this.winningRow = winningRow_;\r\n        this.winningCol = winningCol_;\r\n        this.blocks = blocks_;\r\n        this.insertBlocks();\r\n    }\r\n}\r\n\r\n\r\nfunction cloneBoard(board: Board, move: Move): Board {\r\n    // function to generate a new board following a move\r\n    let blocks: Array<Block> = new Array<Block>();\r\n    for (let block of board.blocks) {\r\n        let newBlock: Block = cloneBlock(block);\r\n        if (equivalentBlocks(newBlock, move.block)) {\r\n            moveBlock(newBlock, move.dirs);\r\n        }\r\n        blocks.push(newBlock);\r\n    }\r\n    let newBoard: Board = new Board(blocks, board.winningRow, board.winningCol);\r\n    return newBoard;\r\n}\r\n\r\n\r\nclass TreeNode {\r\n    // ATTRIBUTES\r\n    readonly board: Board;\r\n    readonly parent: TreeNode | null;\r\n    readonly headDist: number = 0;\r\n\r\n    // METHODS\r\n    getChildren(hashes: Set<string>): Array<TreeNode> {\r\n        let children: Array<TreeNode> = new Array<TreeNode>();\r\n        for (let move of this.board.getMoves()) {\r\n            let childBoard: Board = cloneBoard(this.board, move);\r\n            let childHash: string = childBoard.getHash();\r\n            if (!hashes.has(childHash)) {\r\n                hashes.add(childHash);\r\n                let child: TreeNode = new TreeNode(childBoard, this);\r\n                children.push(child);\r\n            }\r\n        }\r\n        return children;\r\n    }\r\n\r\n    // CONSTRUCTOR\r\n    constructor(board_: Board, parent_: TreeNode | null) {\r\n        this.board = board_;\r\n        this.parent = parent_;\r\n        if (this.parent !== null) this.headDist = this.parent.headDist + 1;\r\n    }\r\n}\r\n\r\n\r\nclass Solver {\r\n    // ATTRIBUTES\r\n    head: TreeNode;\r\n    tail: TreeNode | null = null;\r\n\r\n    // METHODS\r\n    solve(): void {\r\n        // TO-DO\r\n        let hashes: Set<string> = new Set<string>();\r\n        let queue: Array<TreeNode> = new Array<TreeNode>();\r\n        queue.push(this.head); // add the head node to queue\r\n        hashes.add(this.head.board.getHash()); // add the head node board hash to set\r\n        // BFS board configurations until a winning board is found\r\n        while (queue.length > 0) {\r\n            let top: TreeNode | undefined = queue.shift();\r\n            if (top !== undefined) {\r\n                if (top.board.isSolved()) {\r\n                    this.tail = top;\r\n                    return;\r\n                }\r\n                for (let child of top.getChildren(hashes)) queue.push(child);\r\n            }\r\n        }\r\n        return;\r\n    }\r\n    getBoards(): Array<Array<Block>> {\r\n        if (this.tail === null) {\r\n            return [];\r\n        } else {\r\n            let res: Array<Array<Block>> = new Array<Array<Block>>(this.tail.headDist);\r\n            let node: TreeNode | null = this.tail;\r\n            while (node !== null) {\r\n                res[node.headDist-1] = node.board.blocks;\r\n                node = node.parent;\r\n            }\r\n            return res;\r\n        }\r\n    }\r\n    // CONSTRUCTOR\r\n    constructor(blocks: Array<Block>, winningRow: number, winningCol: number) {\r\n        this.head = new TreeNode(new Board(blocks, winningRow, winningCol), null);\r\n    }\r\n}\r\n\r\nexport default Solver;","import React from 'react';\r\nimport Solver from './solver.ts';\r\nimport './style.css';\r\n\r\nfunction BoardBlock(props) {\r\n  const oneblock =  \"col-3 boardblock p-0 m-0 bg-success border border-dark rounded\";\r\n  const twoblockV = \"col-3 boardblock p-0 m-0 bg-primary border border-dark\";\r\n  const twoblockH = \"col-3 boardblock p-0 m-0 bg-warning border border-dark\";\r\n  const fourblock = \"col-3 boardblock p-0 m-0 bg-danger border border-dark\"\r\n\r\n  let classString = \"\";\r\n  if (props.size === 1) {\r\n    classString = oneblock;\r\n  } else if (props.size === 2 && props.block.numCols === 1) {\r\n    if (props.currRow === props.block.rowPos) {\r\n      classString = twoblockV + \" border-bottom-0 rounded-top\";\r\n    } else {\r\n      classString = twoblockV + \" border-top-0 rounded-bottom\"\r\n    }\r\n  } else if (props.size === 2) {\r\n    if (props.currCol === props.block.colPos) {\r\n      classString = twoblockH + \" border-right-0 rounded-left\";\r\n    } else {\r\n      classString = twoblockH + \" border-left-0 rounded-right\";\r\n    }\r\n  } else if (props.size === 4) {\r\n    if (props.currCol === props.block.colPos && props.currRow === props.block.rowPos) {\r\n      classString = fourblock + \" border-right-0 border-bottom-0 rounded-top-left\";\r\n    } else if (props.currCol === props.block.colPos && props.currRow !== props.block.rowPos) {\r\n      classString = fourblock + \" border-right-0 border-top-0 rounded-bottom-left\";\r\n    } else if (props.currCol !== props.block.colPos && props.currRow === props.block.rowPos) {\r\n      classString = fourblock + \" border-left-0 border-bottom-0 rounded-top-right\";\r\n    } else {\r\n      classString = fourblock + \" border-left-0 border-top-0 rounded-bottom-right\";\r\n    }\r\n  } else {\r\n    alert(\"Invalid board cell properties\");\r\n  }\r\n\r\n  return (\r\n    <div className={classString}\r\n      id={props.id}\r\n      onMouseUp={props.onDropFunc}\r\n      onMouseDown={props.onClickFunc}\r\n      >\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nfunction BoardCell (props) {\r\n  // function for calling parent setWinningPos function\r\n  function click(e) {\r\n    props.onClickFunc(e);\r\n  }\r\n\r\n  var currRow = parseInt(props.id.split(\",\")[0]);\r\n  var currCol = parseInt(props.id.split(\",\")[1]);\r\n  var size = props.block.numRows*props.block.numCols;\r\n\r\n  const winCell = (\r\n      <div className=\"col-3 boardcell winningcell p-0 m-0 border\"\r\n        id={props.id}\r\n        onMouseUp={props.onDropFunc}\r\n        onMouseDown={click}>\r\n      </div>\r\n    );\r\n  const cell = (\r\n    <div className=\"col-3 boardcell p-0 m-0 border\"\r\n      id={props.id}\r\n      onMouseUp={props.onDropFunc}\r\n      onMouseDown={click}>\r\n    </div>\r\n  );\r\n\r\n  if (size === 0) {\r\n    // winning cell\r\n    let winRow = props.winningRow;\r\n    let winCol = props.winningCol;\r\n    if ((currRow === winRow || currRow === winRow+1) && (currCol === winCol || currCol === winCol+1)) {\r\n      return winCell;\r\n    // normal cell\r\n    } else {\r\n      return cell;\r\n    }\r\n  // block placed\r\n  } else {\r\n    return (\r\n      <BoardBlock\r\n        key={props.id}\r\n        id={props.id}\r\n        block={props.block}\r\n        currCol={currCol}\r\n        currRow={currRow}\r\n        size={size}\r\n        onDropFunc={props.onDropFunc}\r\n        onClickFunc={click}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nfunction BoardRow(props) {\r\n  const row = props.cells.map((cell) =>\r\n    <BoardCell\r\n      key={cell.id}\r\n      id={cell.id}\r\n      block={cell.val}\r\n      onClickFunc={props.onClickFunc}\r\n      onDropFunc={props.onDropFunc}\r\n      winningRow={props.winningRow}\r\n      winningCol={props.winningCol}\r\n    />\r\n  );\r\n  return (\r\n    <div className=\"row boardrow p-0 m-0\">\r\n      {row}\r\n    </div>\r\n  );\r\n\r\n}\r\n\r\nfunction Board(props) {\r\n  // Function for checking overlap between placed blocks and initiating\r\n  // subsequent replacements.\r\n  function checkBlock(newBlock) {\r\n    var newBlocks = [];\r\n    var t1 = newBlock.rowPos;\r\n    var b1 = newBlock.rowPos + newBlock.numRows - 1;\r\n    var l1 = newBlock.colPos;\r\n    var r1 = newBlock.colPos + newBlock.numCols - 1;\r\n    for (var i = 0; i < props.blocks.length; i++) {\r\n      var block = props.blocks[i];\r\n      var t2 = block.rowPos;\r\n      var b2 = block.rowPos + block.numRows - 1;\r\n      var l2 = block.colPos;\r\n      var r2 = block.colPos + block.numCols - 1;\r\n      var overlap = ( \r\n        // bottom-right/top-left overlap\r\n        (t2 >= t1 && t2 <= b1 && l2 >= l1 && l2 <= r1) ||\r\n        (t1 >= t2 && t1 <= b2 && l1 >= l2 && l1 <= r2) ||\r\n        // top-right/bottom-left overlap \r\n        (t1 >= t2 && t1 <= b2 && r1 >= l2 && r1 <= r2) ||\r\n        (t2 >= t1 && t2 <= b1 && r2 >= l1 && r2 <= r1)\r\n      );        \r\n      if (!overlap) newBlocks.push(block);\r\n    }\r\n    newBlocks.push(newBlock);\r\n    props.onAddBlock(newBlocks);\r\n  }\r\n  // Function passed to the BoardCell component which will pass the rowPos and\r\n  // colPos information from the BoardCell where a DraggableBlock is dropped.\r\n  // This function uses that information and the DraggableBlock's numRows and\r\n  // numCols properties send from the Content component through the dragBlock\r\n  // property.\r\n  function onDrop(e) {\r\n    if (props.dragBlock) {\r\n      let currRow = parseInt(e.currentTarget.id.split(\",\")[0]);\r\n      let currCol = parseInt(e.currentTarget.id.split(\",\")[1]);\r\n      let maxRow = currRow + props.dragBlock.numRows - 1;\r\n      let maxCol = currCol + props.dragBlock.numCols - 1;\r\n      if (maxRow < props.boardRows && maxCol < props.boardCols) {\r\n        // instantiate new block\r\n        var newBlock = { \r\n          rowPos: currRow, \r\n          colPos: currCol, \r\n          numRows: props.dragBlock.numRows,\r\n          numCols: props.dragBlock.numCols\r\n        };\r\n        // cannot place fourblock in winning position\r\n        if (\r\n          !(newBlock.numRows*newBlock.numCols === 4 && \r\n            newBlock.rowPos === props.winningRow && \r\n            newBlock.colPos === props.winningCol)\r\n        ) {\r\n          // push newBlocks to Content component to be fed back into Board via props\r\n          checkBlock(newBlock);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  // function for displaying current board blocks\r\n  function getBlocks() {\r\n    // initialize 2d array with no blocks\r\n    var board = new Array(5); \r\n    for (var i = 0; i < props.boardRows; i++) {\r\n      var tempRow = { id: i, row: new Array(4) }\r\n      for (var j = 0; j < props.boardCols; j++) {\r\n        var tempCell = {\r\n          id: i.toString() + \",\" + j.toString(), \r\n          val: { numRows: 0, numCols: 0, rowPos: i, colPos: j }\r\n        }\r\n        tempRow.row[j] = tempCell;\r\n      }\r\n      board[i] = tempRow;\r\n    }\r\n    // insert blocks\r\n    for (var b = 0; b < props.blocks.length; b++) {\r\n      var block = props.blocks[b];\r\n      let lastCol = block.colPos + block.numCols - 1;      \r\n      let lastRow = block.rowPos + block.numRows - 1;      \r\n      for (var r = block.rowPos; r <= lastRow; r++) {\r\n        for (var c = block.colPos; c <= lastCol; c++) {\r\n          ((board[r].row)[c]).val = block;\r\n        }\r\n      }\r\n    }\r\n    return board;\r\n  }\r\n\r\n  const rows = getBlocks();\r\n  const board = rows.map((row) =>\r\n    <BoardRow\r\n      key={row.id}\r\n      cells={row.row}\r\n      onClickFunc={(props.dragBlock ? onDrop : props.moveWinPos)}\r\n      onDropFunc={onDrop}\r\n      winningRow={props.winningRow}\r\n      winningCol={props.winningCol}\r\n    />\r\n  )\r\n\r\n  return ( \r\n    <div className=\"p-0 mt-4 border\" id=\"board\">\r\n      {board}   \r\n    </div>\r\n  );\r\n}\r\n\r\nclass DraggableBlock extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      rel: null,\r\n      pos: { left: 0, top: 0}\r\n    };\r\n    this.click = this.click.bind(this);\r\n    this.move = this.move.bind(this);\r\n    this.drop = this.drop.bind(this);\r\n  }\r\n\r\n  // function called on mouse down on a draggable block\r\n  click(e) {\r\n    if (e.button !== 0) return\r\n    let currPos = e.currentTarget.getBoundingClientRect();\r\n    this.setState((state) => ({\r\n      rel: {\r\n        left: currPos.left,\r\n        top: currPos.top\r\n      }\r\n    }));\r\n    document.addEventListener(\"mousemove\", this.move); // listen for mouse move\r\n    document.addEventListener(\"mouseup\", this.drop); // listen for mouse up (drop)\r\n    this.props.onDragFunc(e.currentTarget.id); // send content the current block's ID\r\n    e.stopPropagation();\r\n    e.preventDefault();\r\n  }\r\n  \r\n  // function called on mouse move after mouse down on a draggable block\r\n  move(e) {\r\n    let x = e.pageX;\r\n    let y = e.pageY;\r\n    this.setState((state) => ({\r\n      pos: {\r\n        left: x - this.state.rel.left,\r\n        top: y - this.state.rel.top\r\n      }\r\n    }));\r\n    e.stopPropagation();\r\n    e.preventDefault();\r\n  }\r\n\r\n  // function called on mouse up after mouse down on a draggable block\r\n  drop(e) {\r\n    this.setState((state) => ({\r\n      rel: null,\r\n      pos: {left: 0, top: 0}\r\n    }));\r\n    document.removeEventListener(\"mousemove\", this.move);\r\n    document.removeEventListener(\"mouseup\", this.drop);\r\n    e.stopPropagation();\r\n    e.preventDefault();\r\n  }\r\n\r\n  render() {\r\n    // dragblock vars\r\n    const steez = {\r\n      position: \"relative\",\r\n      left: this.state.pos.left + \"px\",\r\n      top: this.state.pos.top + \"px\"\r\n    };\r\n    const oneblockString  = \"draggable-oneblock  draggable m-2 p-0 bg-success border border-dark rounded\";\r\n    const twoblockHString = \"draggable-twoblockH draggable m-2 p-0 bg-warning border border-dark rounded\";\r\n    const twoblockVString = \"draggable-twoblockV draggable m-2 p-0 bg-primary border border-dark rounded\";\r\n    const fourblockString = \"draggable-fourblock draggable m-2 p-0 bg-danger  border border-dark rounded\";\r\n    let classString = \"\";\r\n    // check block size\r\n    if (this.props.size === 4) classString = fourblockString;\r\n    else if (this.props.size === 2 && this.props.block.numCols === 1) classString = twoblockVString;\r\n    else if (this.props.size === 2) classString = twoblockHString;\r\n    else if (this.props.size === 1) classString = oneblockString;\r\n    else alert(\"Invalid draggable block properties\");\r\n    // return dragblock\r\n    return (\r\n      <div className={classString}\r\n        id={this.props.id}\r\n        style={steez}\r\n        onMouseDown={this.click}>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction Toolbar(props) {\r\n  // only show toolbar when board is cleared or blocks are being added\r\n  if (props.show) {\r\n    return (\r\n      <div className=\"col-12 mt-2\">\r\n        <div className=\"row justify-content-center\">\r\n          <DraggableBlock \r\n            size={4} \r\n            id=\"2,2\"\r\n            onDragFunc={props.onDragFunc}\r\n          />\r\n          <DraggableBlock \r\n            size={2} \r\n            id=\"2,1\" \r\n            block={{ numRows: 2, numCols: 1 }} \r\n            onDragFunc={props.onDragFunc}\r\n          />\r\n          <DraggableBlock \r\n            size={2} \r\n            id=\"1,2\" \r\n            block={{ numRows: 1, numCols: 2 }} \r\n            onDragFunc={props.onDragFunc}\r\n          />\r\n          <DraggableBlock \r\n            size={1} \r\n            id=\"1,1\" \r\n            onDragFunc={props.onDragFunc}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    return <span></span>;\r\n  }\r\n}\r\n\r\nfunction Buttons(props) {\r\n  // button for clearing board\r\n  const clearButton = (\r\n    <button className=\"btn btn-sm btn-danger mr-2\" \r\n      onClick={props.onClear}>\r\n        Clear\r\n    </button>\r\n  );\r\n  // button for displaying the default board\r\n  const defaultButton = (\r\n    <button className=\"btn btn-sm btn-warning mx-1\" \r\n      onClick={props.onDefault}>\r\n        Default\r\n    </button>\r\n  );\r\n  // button to finalize moves in solution\r\n  const finishButton = (\r\n    <button className=\"btn btn-sm btn-success ml-2\" \r\n      onClick={props.onFinish}>\r\n        Finish\r\n    </button>\r\n  );\r\n  //button to see next move in solution\r\n  const nextButton = (\r\n    <button className=\"btn btn-sm btn-warning mx-2\" \r\n      onClick={props.onNext}>\r\n        Next\r\n    </button>\r\n  );\r\n  // button to see previous move in solution\r\n  const prevButton = (\r\n    <button className=\"btn btn-sm btn-danger mr-2\" \r\n      onClick={props.onPrev}\r\n      id=\"prev-btn\">\r\n        Prev\r\n    </button>\r\n  );\r\n  // button for running script to solve board\r\n  const solveButton = (\r\n    <button className=\"btn btn-sm btn-primary ml-2\" \r\n      onClick={props.onSolve}>\r\n        Solve!\r\n    </button>\r\n  );\r\n  \r\n  // buttons displayed after last solution move is seen \r\n  if (props.state === \"finished\") {\r\n    return <span></span>;\r\n  // buttons displayed after solve button is pressed\r\n  } else if (props.state === \"solved\") {\r\n    return (\r\n      <div className=\"text-center mt-2\">\r\n        {prevButton}\r\n        {nextButton}\r\n        {finishButton}\r\n      </div>\r\n    );\r\n  // buttons displayed after blocks have been dropped\r\n  } else if (props.state === \"blocksAdded\"){\r\n    return (\r\n      <div className=\"text-center mt-2\">\r\n        {clearButton}\r\n        {solveButton}\r\n      </div>\r\n    );\r\n  // buttons displayed when board is cleared of blocks\r\n  } else if (props.state === \"cleared\"){\r\n    return (\r\n      <div className=\"text-center mt-2\">\r\n        {defaultButton}\r\n        {solveButton}\r\n      </div>\r\n    );\r\n  // buttons displayed when default board is shown\r\n  } else if (props.state === \"default\") {\r\n    return (\r\n      <div className=\"text-center mt-2\">\r\n        {clearButton}\r\n        {solveButton}\r\n      </div>\r\n    );\r\n  } else {\r\n    return <span></span>;\r\n  }\r\n}\r\n\r\nclass Content extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      blocks: [],\r\n      currState: \"cleared\",\r\n      displayText: \"Klotski Solver\",\r\n      dragBlock: null,\r\n      boardRows: 5,\r\n      boardCols: 4,\r\n      winningRow: 3,\r\n      winningCol: 1\r\n    };\r\n\r\n    this.blocksAdded = this.blocksAdded.bind(this);\r\n    this.clear = this.clear.bind(this);\r\n    this.default = this.default.bind(this);\r\n    this.dragBlockInfo = this.dragBlockInfo.bind(this);\r\n    this.finish = this.finish.bind(this);\r\n    this.next = this.next.bind(this);\r\n    this.prev = this.prev.bind(this);\r\n    this.restart = this.restart.bind(this);\r\n    this.setWinningPos = this.setWinningPos.bind(this);\r\n    this.solve = this.solve.bind(this);\r\n  }\r\n  \r\n\r\n  // BUTTON STATE FUNCTIONS\r\n\r\n\r\n  // Function passed to the Buttons component that updates the Content\r\n  // cleared state property when a user clicks the clear button.\r\n  clear() {\r\n    this.setState(state => ({\r\n      blocks: [],\r\n      currState: \"cleared\",\r\n      displayText: \"Klotski Solver\",\r\n      dragBlock: null,\r\n      boardRows: 5,\r\n      boardCols: 4,\r\n      winningRow: 3,\r\n      winningCol: 1\r\n    }));\r\n  }\r\n  // Function passed to the Buttons component that updates the Content\r\n  // default state property when a user clicks the default button.\r\n  default() {\r\n    const initialBlocks = [\r\n      { rowPos: 0, colPos: 0, numRows: 2, numCols: 1 },\r\n      { rowPos: 0, colPos: 1, numRows: 2, numCols: 2 },\r\n      { rowPos: 0, colPos: 3, numRows: 2, numCols: 1 },\r\n      { rowPos: 2, colPos: 0, numRows: 2, numCols: 1 },\r\n      { rowPos: 2, colPos: 1, numRows: 1, numCols: 2 },\r\n      { rowPos: 2, colPos: 3, numRows: 2, numCols: 1 },\r\n      { rowPos: 3, colPos: 1, numRows: 1, numCols: 1 },\r\n      { rowPos: 3, colPos: 2, numRows: 1, numCols: 1 },\r\n      { rowPos: 4, colPos: 0, numRows: 1, numCols: 1 },\r\n      { rowPos: 4, colPos: 3, numRows: 1, numCols: 1 }\r\n    ]\r\n    this.setState(state => ({\r\n      blocks: initialBlocks,\r\n      currState: \"default\",\r\n      boardRows: 5,\r\n      boardCols: 4,\r\n      winningRow: 3,\r\n      winningCol: 1\r\n    }));\r\n  }\r\n\r\n\r\n  // DRAG-N-DROP FUNCTIONS\r\n\r\n\r\n  // Function passed to the Board component that updates the Content\r\n  // blocksAdded state property when a user adds a block to the board.\r\n  blocksAdded(newBlocks) {\r\n    this.setState(state => ({\r\n      blocks: newBlocks,\r\n      currState: \"blocksAdded\",\r\n    }))\r\n  }\r\n  // Function passed to the Toolbar component (onDragFunc) which alerts the Content\r\n  // component when a DraggableBlock is being dragged and send the block's \r\n  // corresponding ID which contains the block's numRows and numCols properties.\r\n  // This information is used to update the Content dragBlock state property, which\r\n  // is passed to the Board component.\r\n  dragBlockInfo(id) {\r\n    this.setState(state => ({\r\n      dragBlock: {\r\n        numRows: parseInt(id.split(\",\")[0]),\r\n        numCols: parseInt(id.split(\",\")[1])\r\n      }\r\n    }));\r\n  }\r\n\r\n\r\n  // BOARD SOLVING FUNCTIONS\r\n\r\n\r\n  // function for clearing the board after the solution is finished\r\n  restart() {\r\n    let clearFunc = this.clear;\r\n    setTimeout(\r\n      function () {clearFunc()},\r\n      3000\r\n    );\r\n  }\r\n  // Function passed to the Buttons component that updates the Content\r\n  // boards and blocks state properties when a user clicks the next button.\r\n  next() {\r\n    if (this.state.boards.length === 0) {\r\n      return;\r\n    } else {\r\n      if (this.state.boardIdx === this.state.boards.length-1) {\r\n        this.setState(state => ({\r\n          currState: \"finished\",\r\n          displayText: \"You Win!\"\r\n        }));\r\n        this.restart();    \r\n      } else {\r\n        this.setState(state => ({\r\n          blocks: this.state.boards[this.state.boardIdx + 1],\r\n          boardIdx: this.state.boardIdx + 1,\r\n          displayText: \"Move \" + (this.state.boardIdx+2).toString()\r\n        }));\r\n      }\r\n    }\r\n  }\r\n  // Function passed to the Buttons component that updates the Content\r\n  // boards and blocks state properties when a user clicks the prev button.\r\n  prev() {\r\n     if (this.state.boards.length === 0) {\r\n      return;\r\n    } else {\r\n      if (this.state.boardIdx === -1) {\r\n        return;\r\n      } else {\r\n        this.setState(state => ({\r\n          blocks: this.state.boards[this.state.boardIdx - 1],\r\n          boardIdx: this.state.boardIdx - 1,\r\n          displayText: (this.state.boardIdx <= 0 ? \"Klotski Solver\" : \"Move \" + this.state.boardIdx.toString())\r\n        }));\r\n      }\r\n    }\r\n  }\r\n  // Function passed to the Buttons component that updates the Content\r\n  // boards and blocks state properties when a user clicks the next button.\r\n  finish() {\r\n    this.setState(state => ({ currState: \"finished\" }));\r\n    let i = this.state.boardIdx;\r\n    let n = this.state.boards.length;\r\n    let callFunction = this.next;\r\n    // repeat calls to next with a .5 second interval\r\n    var repeater = setInterval(function () {\r\n      if (i < n) {\r\n        callFunction();\r\n        i++;\r\n      } else {\r\n        clearInterval(repeater);\r\n      }\r\n    }, 250);\r\n  }\r\n  // Function passed to the Buttons component that updates the Content\r\n  // solved state property when a user clicks the solve button.\r\n  solve() {\r\n    try {\r\n      console.log(this.state.blocks);\r\n      var s = new Solver(\r\n        this.state.blocks, \r\n        this.state.winningRow, \r\n        this.state.winningCol\r\n      );\r\n      s.solve();\r\n      let solutionMoves = s.getBoards();\r\n      const numMoves = solutionMoves.length;\r\n      if (numMoves === 0) {\r\n        this.setState(state => ({displayText: \"No Solution Found :(\" }));\r\n        this.restart();\r\n      } else {\r\n        this.setState(state => ({\r\n          currState: \"solved\",\r\n          displayText: \"Solution of Length \" + numMoves.toString() + \" Found!\",\r\n          boards: solutionMoves,\r\n          boardIdx: -1\r\n        }));\r\n      }\r\n    } catch (err) {\r\n      alert(err);\r\n    }\r\n  }\r\n\r\n\r\n  // OTHER FUNCTIONS\r\n\r\n\r\n  // function sent to BoardCell for moving the winning position\r\n  setWinningPos(e) {\r\n    let id = e.currentTarget.id;\r\n    let winRow = parseInt(id.split(\",\")[0]);\r\n    let winCol = parseInt(id.split(\",\")[1]);\r\n    if (winRow < this.state.boardRows - 1 && winCol < this.state.boardCols - 1) {\r\n      if (this.state.currState === \"cleared\") {\r\n        this.setState(state => ({\r\n          winningRow: winRow,\r\n          winningCol: winCol \r\n        }));\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"content-wrapper\">\r\n        <div className=\"h1 text-center mt-1 mb-0\" id=\"header\">\r\n          {this.state.displayText} \r\n        </div>\r\n        <div className=\"row justify-content-center px-0 mx-0\">\r\n          <div className=\"col-3 board\">\r\n            <Board \r\n              blocks={this.state.blocks}\r\n              boardRows={this.state.boardRows}\r\n              boardCols={this.state.boardCols}\r\n              dragBlock={this.state.dragBlock}\r\n              onAddBlock={this.blocksAdded}\r\n              moveWinPos={this.setWinningPos}\r\n              winningRow={this.state.winningRow}\r\n              winningCol={this.state.winningCol}\r\n            />\r\n            <Buttons \r\n              state={this.state.currState}\r\n              onClear={this.clear}\r\n              onDefault={this.default}\r\n              onFinish={this.finish}\r\n              onNext={this.next}\r\n              onPrev={this.prev}\r\n              onSolve={this.solve}\r\n            />\r\n          </div>\r\n          <Toolbar \r\n            show={this.state.currState === \"cleared\" || this.state.currState === \"blocksAdded\"}\r\n            onDragFunc={this.dragBlockInfo}\r\n          />\r\n        </div>\r\n        <div className=\"mt-5 text-center text-secondary\" id=\"footer\">\r\n          Developed by Sam Royall\r\n        </div>\r\n      </div>\r\n    );   \r\n  }\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <Content />   \r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}