{"version":3,"sources":["solver.ts","App.js","index.js"],"names":["Dir","oppositeDir","dir","Left","Right","Up","Down","oppositeDirs","dirs","numDirs","length","res","Array","i","cloneBlock","block","rowPos","colPos","numRows","numCols","moveBlock","Board","blocks_","winningRow_","winningCol_","_cells","winningCol","winningRow","blocks","moves","hash","solved","this","insertBlocks","setHash","isSolved","setMoves","fourBlock","Error","j","numNulls","toString","left","right","up","down","row","col","push","initRowPos","initColPos","stack","currentDirs","initDir","top","pop","undefined","makeMove","nextDir","newDirs","findMoves","newBlock","winningBlock","cloneBoard","board","move","b1","b2","TreeNode","board_","parent_","parent","headDist","hashes","children","childBoard","has","child","Solver","head","tail","Set","queue","add","shift","console","log","getChildren","node","BoardBlock","props","size","className","BoardCell","state","currRow","parseInt","id","split","currCol","click","bind","e","onClickFunc","currentTarget","hasOwnProperty","onMouseUp","onDropFunc","onMouseDown","key","React","Component","BoardRow","cells","map","cell","val","blocksAdded","onDrop","dragBlock","lastRow","lastCol","alert","newBlocks","setState","onAddBlock","NoBlock","tempRow","tempCell","b","r","c","getBlocks","DraggableBlock","rel","pos","drag","drop","button","currPos","getBoundingClientRect","document","addEventListener","onDragFunc","stopPropagation","preventDefault","x","pageX","y","pageY","removeEventListener","style","position","Toolbar","show","Buttons","clearButton","onClick","onClear","doubleClearButton","onDoubleClear","defaultButton","onDefault","solveButton","onSolve","prevButton","onPrev","nextButton","onNext","finishButton","onFinish","cleared","finished","Content","displayText","default","clear","doubleClear","solve","next","prev","restart","finish","dragBlockInfo","clearDragBlock","setWinningPos","clearFunc","setTimeout","s","solutionMoves","getBoards","numMoves","boards","boardIdx","err","n","callFunction","repeater","setInterval","clearInterval","initialBlocks","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a1fa5440.chunk.js","sourcesContent":["enum Dir { Left, Right, Up, Down }\r\n\r\nfunction oppositeDir(dir: Dir): Dir {\r\n    // for a given direction, return its opposites\r\n    if (dir === Dir.Left) return Dir.Right;\r\n    else if (dir === Dir.Right) return Dir.Left;\r\n    else if (dir === Dir.Up) return Dir.Down;\r\n    else return Dir.Up;\r\n}\r\n\r\nfunction oppositeDirs(dirs: Array<Dir>): Array<Dir> {\r\n    // for a list of directions, return a reversed list of the opposites \r\n    // of these directions\r\n    let numDirs: number = dirs.length;\r\n    let res: Array<Dir> = new Array<Dir>(numDirs);\r\n    for (let i: number = 0; i < numDirs; i++) {\r\n        res[numDirs-i-1] = oppositeDir(dirs[i]);\r\n    }\r\n    return res;\r\n}\r\n\r\ninterface Block {\r\n    readonly numRows: number;\r\n    readonly numCols: number;\r\n    rowPos: number;\r\n    colPos: number;\r\n}\r\n\r\nfunction cloneBlock(block: Block): Block {\r\n    return ({\r\n        rowPos: block.rowPos,\r\n        colPos: block.colPos,\r\n        numRows: block.numRows,\r\n        numCols: block.numCols\r\n    });\r\n}\r\n\r\ninterface Move {\r\n    readonly block: Block;\r\n    readonly dirs: Array<Dir>;\r\n}\r\n\r\n\r\nfunction moveBlock(block: Block, dirs: Array<Dir>): void {\r\n    // for each direction in a direction list, update the block \r\n    // positioning accordingly\r\n    for (let dir of dirs) {\r\n        if (dir === Dir.Left) block.colPos--;\r\n        else if (dir === Dir.Right) block.colPos++;\r\n        else if (dir === Dir.Up) block.rowPos--;\r\n        else block.rowPos++;\r\n    }\r\n    return;\r\n}\r\n\r\nfunction equivalentBlocks(b1: Block, b2: Block): boolean {\r\n    // return a boolean value representing whether two blocks are equivalent\r\n    return (\r\n      b1.rowPos === b2.rowPos && \r\n      b1.colPos === b2.colPos &&\r\n      b1.numRows === b2.numRows && \r\n      b1.numCols === b2.numCols\r\n    );\r\n}\r\n\r\n\r\nclass Board {\r\n    // ATTRIBUTES\r\n    private _cells: Array<Array<Block | null>> = [\r\n        [null, null, null, null],\r\n        [null, null, null, null],\r\n        [null, null, null, null],\r\n        [null, null, null, null],\r\n        [null, null, null, null],\r\n    ];\r\n    readonly winningCol: number; \r\n    readonly winningRow: number; \r\n    readonly blocks: Array<Block>;\r\n    readonly moves: Array<Move>;\r\n    readonly hash: string;\r\n    readonly solved: boolean;\r\n\r\n    // METHODS\r\n    private insertBlocks(): void {\r\n        // for each block, ensure that all board cells to be covered by the \r\n        // block are free; if so, place `block` in all covered cells.\r\n        let fourBlock: boolean = false;\r\n        for (let block of this.blocks) {\r\n            if (block.numRows*block.numCols === 4 && !fourBlock) fourBlock = true; \r\n            else if (block.numRows*block.numCols === 4) throw new Error(\"There must be exacly one block of size 4\");\r\n            for (let i: number = block.rowPos; i < block.rowPos + block.numRows; i++) {\r\n                for (let j: number = block.colPos; j < block.colPos + block.numCols; j++) {\r\n                    if (this._cells[i][j] === null) {\r\n                        this._cells[i][j] = block;\r\n                    } else {\r\n                        throw new Error(\"Invalid block positioning\");\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (!fourBlock) throw new Error(\"There must be exactly one block of size 4\");\r\n    }\r\n    private setHash(): string {\r\n        // walk through `_cells` matrix, convert blocks to simple strings, and\r\n        // concatenate them into the `hash` string\r\n        let res: string = \"\";\r\n        let numNulls: number = 0;\r\n        for (let i: number = 0; i < 5; i++) {\r\n            for (let j: number  = 0; j < 4; j++) {\r\n                let block: Block | null = this._cells[i][j];\r\n                if (block === null) {\r\n                    res += \"0\";\r\n                    numNulls++;\r\n                } else if ( block.numRows*block.numCols === 2) {\r\n                    res += (block.numRows === 1 ? \"2H\" : \"2V\");\r\n                } else {\r\n                    res += (block.numRows*block.numCols).toString();\r\n                } \r\n            }\r\n        }\r\n        if (numNulls !== 2) throw new Error(\"There must be exactly 2 free spaces on the board\");\r\n        return res;\r\n    }\r\n    private currentDirs(block: Block): Array<Dir> {\r\n        // for a given block return a list of directions corresponding \r\n        // to open moves\r\n        let dirs: Array<Dir> = new Array<Dir>();\r\n        let left: boolean = true;\r\n        let right: boolean = true;\r\n        let up: boolean = true;\r\n        let down: boolean = true;\r\n        // check horizontal moves\r\n        for (let row: number = block.rowPos; row < block.rowPos + block.numRows; row++) {\r\n            // Left\r\n            let col: number = block.colPos;\r\n            if (left && (col < 1 || this._cells[row][col-1] !== null)) left = false;\r\n            // Right\r\n            col = block.colPos + block.numCols - 1;\r\n            if (right && (col > 2 || this._cells[row][col+1] !== null)) right = false;\r\n        }\r\n        // check vertical moves\r\n        for (let col: number = block.colPos; col < block.colPos + block.numCols; col++) {\r\n            // Up\r\n            let row: number = block.rowPos;\r\n            if (up && (row < 1 || this._cells[row-1][col] !== null)) up = false;\r\n            // Down\r\n            row = block.rowPos + block.numRows - 1;\r\n            if (down && (row > 3 || this._cells[row+1][col] !== null)) down = false;\r\n        }\r\n        // Push valid directions to result list\r\n        if (left) dirs.push(Dir.Left);\r\n        if (right) dirs.push(Dir.Right);\r\n        if (up) dirs.push(Dir.Up);\r\n        if (down) dirs.push(Dir.Down);\r\n        return dirs;\r\n    }\r\n    private makeMove(block: Block, dirs: Array<Dir>): void {\r\n        // for each direction in a given list of directions and a block, \r\n        // move the block and update the `_cells` matrix\r\n        let numRows: number = block.numRows;\r\n        let numCols: number = block.numCols;\r\n        for (let dir of dirs) {\r\n            let initRowPos: number = block.rowPos;\r\n            let initColPos: number = block.colPos;\r\n            moveBlock(block, [dir]); // update block positions\r\n            // update `_cells` for left or up moves\r\n            if (dir === Dir.Left|| dir === Dir.Up) {\r\n                for (let i: number = initRowPos; i < initRowPos + numRows; i++) {\r\n                    for (let j: number = initColPos; j < initColPos + numCols; j++) {\r\n                        if (dir === Dir.Left) this._cells[i][j-1] = block;\r\n                        else this._cells[i-1][j] = block;\r\n                        this._cells[i][j] = null;\r\n                    }\r\n                }\r\n            // update `_cells` for right or down moves\r\n            } else {\r\n                for (let i: number = initRowPos + numRows - 1; i >= initRowPos; i--) {\r\n                    for (let j: number = initColPos + numCols - 1; j >= initColPos; j--) {\r\n                        if (dir === Dir.Right) this._cells[i][j+1] = block;\r\n                        else this._cells[i+1][j] = block;\r\n                        this._cells[i][j] = null;\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n    private findMoves(block: Block): Array<Array<Dir>> {\r\n        // given a block, do a depth first search for each available direction\r\n        // that is not a step backward and return a list of the valid direction paths\r\n        let res: Array<Array<Dir>> = new Array<Array<Dir>>();\r\n        let stack: Array<Array<Dir>> = new Array<Array<Dir>>();\r\n        // push initial directions to stack\r\n        for (let initDir of this.currentDirs(block)) stack.push([initDir]);\r\n        while (stack.length > 0) {\r\n            let top: Array<Dir> | undefined = stack.pop(); // get top\r\n            if (top !== undefined) {\r\n                res.push(top); // push dirs to result\r\n                this.makeMove(block, top); // move block\r\n                // return valid directions from current position\r\n                // since a board will have two free spaces, move paths\r\n                // can be maximum length 2\r\n                if (top.length < 2) {\r\n                    for (let nextDir of this.currentDirs(block)) {\r\n                        // ensure next direction is not a move backward\r\n                        if (nextDir !== oppositeDir(top[top.length-1])) {\r\n                            let newDirs: Array<Dir> = [...top];\r\n                            newDirs.push(nextDir);\r\n                            stack.push(newDirs); // push new dirs list\r\n                        }\r\n                    }\r\n                }\r\n                this.makeMove(block, oppositeDirs(top)); // unMove block\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n    private setMoves(): Array<Move> {\r\n        // for each block, find all valid move paths and push\r\n        // the corresponding Move objects to the `moves` array\r\n        let res: Array<Move> = new Array<Move>();\r\n        for (let block of this.blocks) {\r\n            for (let dirs of this.findMoves(block)) {\r\n                // clone move block\r\n                let newBlock: Block = cloneBlock(block);\r\n                // add move to result list\r\n                res.push({\r\n                    block: newBlock, \r\n                    dirs: dirs\r\n                });\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n    private isSolved(): boolean {\r\n        let winningBlock: Block | null = this._cells[this.winningRow][this.winningCol];\r\n        if (winningBlock !== null) {\r\n            return (\r\n                winningBlock.rowPos === this.winningRow && \r\n                winningBlock.colPos === this.winningCol &&\r\n                winningBlock.numRows * winningBlock.numCols === 4\r\n            );\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // CONSTRUCTOR \r\n    constructor(blocks_: Array<Block>, winningRow_: number, winningCol_: number) {\r\n        this.winningRow = winningRow_;\r\n        this.winningCol = winningCol_;\r\n        this.blocks = blocks_;\r\n        this.insertBlocks();\r\n        this.hash = this.setHash();\r\n        this.solved = this.isSolved();\r\n        this.moves = this.setMoves();\r\n    }\r\n}\r\n\r\n\r\nfunction cloneBoard(board: Board, move: Move): Board {\r\n    // function to generate a new board following a move\r\n    let blocks: Array<Block> = new Array<Block>();\r\n    for (let block of board.blocks) {\r\n        let newBlock: Block = cloneBlock(block);\r\n        if (equivalentBlocks(newBlock, move.block)) {\r\n            moveBlock(newBlock, move.dirs);\r\n        }\r\n        blocks.push(newBlock);\r\n    }\r\n    let newBoard: Board = new Board(blocks, board.winningRow, board.winningCol);\r\n    return newBoard;\r\n}\r\n\r\n\r\nclass TreeNode {\r\n    // ATTRIBUTES\r\n    readonly board: Board;\r\n    readonly parent: TreeNode | null;\r\n    readonly headDist: number = 0;\r\n\r\n    // METHODS\r\n    getChildren(hashes: Set<string>): Array<TreeNode> {\r\n        let children: Array<TreeNode> = new Array<TreeNode>();\r\n        for (let move of this.board.moves) {\r\n            let childBoard: Board = cloneBoard(this.board, move);\r\n            if (!hashes.has(childBoard.hash)) {\r\n                let child: TreeNode = new TreeNode(childBoard, this);\r\n                children.push(child);\r\n            }\r\n        }\r\n        return children;\r\n    }\r\n\r\n    // CONSTRUCTOR\r\n    constructor(board_: Board, parent_: TreeNode | null) {\r\n        this.board = board_;\r\n        this.parent = parent_;\r\n        if (this.parent !== null) this.headDist = this.parent.headDist + 1;\r\n    }\r\n}\r\n\r\n\r\nclass Solver {\r\n    // ATTRIBUTES\r\n    head: TreeNode;\r\n    tail: TreeNode | null = null;\r\n\r\n    // METHODS\r\n    solve(): void {\r\n        // TO-DO\r\n        let hashes: Set<string> = new Set<string>();\r\n        let queue: Array<TreeNode> = new Array<TreeNode>();\r\n        queue.push(this.head); // add the head node to queue\r\n        hashes.add(this.head.board.hash); // add the head node board hash to set\r\n        // BFS board configurations until a winning board is found\r\n        while (queue.length > 0) {\r\n            let top: TreeNode | undefined = queue.shift();\r\n            if (top !== undefined) {\r\n                if (top.board.solved) {\r\n                    this.tail = top;\r\n                    console.log(\"Solution found of length: \" + top.headDist);\r\n                    return;\r\n                }\r\n                for (let child of top.getChildren(hashes)) {\r\n                    hashes.add(child.board.hash); // add new hash to hashes set\r\n                    queue.push(child);\r\n                }\r\n            }\r\n        }\r\n        return;\r\n    }\r\n    getBoards(): Array<Array<Block>> {\r\n        if (this.tail === null) {\r\n            return [];\r\n        } else {\r\n            let res: Array<Array<Block>> = new Array<Array<Block>>(this.tail.headDist);\r\n            let node: TreeNode | null = this.tail;\r\n            while (node !== null) {\r\n                res[node.headDist-1] = node.board.blocks;\r\n                node = node.parent;\r\n            }\r\n            return res;\r\n        }\r\n    }\r\n    // CONSTRUCTOR\r\n    constructor(blocks: Array<Block>, winningRow: number, winningCol: number) {\r\n        this.head = new TreeNode(new Board(blocks, winningRow, winningCol), null);\r\n    }\r\n}\r\n\r\nexport default Solver;","import React from 'react';\nimport Solver from './solver.ts';\nimport './style.css';\n\nfunction BoardBlock(props) {\n  if (props.size === 4) {\n    return (\n      <div className=\"col-6 fourblock m-0 bg-danger border border-dark rounded\"></div>\n    );\n  } else if (props.size === 2) {\n    if (props.block.numCols === 1) {\n        return (\n          <div className=\"col-3 twoblockV m-0 bg-primary border border-dark rounded\"></div>\n        );\n    } else if (props.block.numCols === 2) {\n        return (\n          <div className=\"col-6 twoblockH m-0 bg-warning border border-dark rounded\"></div>\n        );\n    }\n  } else if (props.size === 1) {\n    return (\n      <div className=\"col-3 oneblock m-0 bg-success border border-dark rounded\"></div>\n    );\n  }\n}\n\nclass BoardCell extends React.Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n        currRow: parseInt(props.id.split(\",\")[0]),\n        currCol: parseInt(props.id.split(\",\")[1])\n    }\n    this.click = this.click.bind(this);\n  }\n\n  click(e) {\n    this.props.onClickFunc(e.currentTarget.id);\n  }\n  \n  render() {\n    // currently under placed block\n    if (this.props.block == null) {\n      return (\n        <span></span>\n      );\n    // under overflow of placed block\n    } else if (\n      !this.props.block.hasOwnProperty(\"colPos\") && \n      !this.props.block.hasOwnProperty(\"rowPos\")\n    ) {\n      return (\n        <div className=\"col-3 p-0 m-0\"></div>\n      );\n    } else {\n      const size = (\n        this.props.block.hasOwnProperty(\"numCols\") ? \n        this.props.block.numRows*this.props.block.numCols : \n        this.props.block.numRows*this.props.block.numRows\n      );\n      // empty space\n      if (size === 0) {\n        // winning cell\n        if (\n          (this.state.currRow === this.props.winningRow || this.state.currRow === this.props.winningRow+1) && \n          (this.state.currCol === this.props.winningCol || this.state.currCol === this.props.winningCol+1)\n        ) {\n          if (this.state.currRow === 4 || this.state.currCol === 3) {\n            return (\n              <div className=\"col-3 boardcell winningcell p-0 m-0 border\"\n                id={this.props.id}\n                onMouseUp={this.props.onDropFunc}>\n              </div>\n            );\n          } else {\n            return (\n              <div className=\"col-3 boardcell winningcell p-0 m-0 border\"\n                id={this.props.id}\n                onMouseUp={this.props.onDropFunc}\n                onMouseDown={this.click}>\n              </div>\n            );\n          }\n        // normal cell\n        } else {\n          if (this.state.currRow === 4 || this.state.currCol === 3) {\n            return (\n              <div className=\"col-3 boardcell p-0 m-0 border\"\n                id={this.props.id}\n                onMouseUp={this.props.onDropFunc}>\n              </div>\n            );\n          } else {\n            return (\n              <div className=\"col-3 boardcell p-0 m-0 border\"\n                id={this.props.id}\n                onMouseUp={this.props.onDropFunc}\n                onMouseDown={this.click}>\n              </div>\n            );\n          }\n        }\n      // block placed\n      } else {\n        return (\n          <BoardBlock\n            key={this.props.id}\n            size={size}\n            block={this.props.block}\n          />\n        );\n      }\n    }\n  }\n}\n\nfunction BoardRow(props) {\n  const row = props.cells.map( (cell) =>\n    <BoardCell\n      key={cell.id}\n      id={cell.id}\n      block={cell.val}\n      onDropFunc={props.onDropFunc}\n      onClickFunc={props.onClickFunc}\n      winningRow={props.winningRow}\n      winningCol={props.winningCol}\n    />\n  );\n  return (\n    <div className=\"row boardrow p-0 m-0\">\n      {row}\n    </div>\n  );\n\n}\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      blocks: this.props.blocks,\n      blocksAdded: false,\n    };\n\n    this.onDrop = this.onDrop.bind(this);\n  }\n\n  // Function passed to the BoardCell component which will pass the rowPos and\n  // colPos information from the BoardCell where a DraggableBlock is dropped.\n  // This function uses that information and the DraggableBlock's numRows and\n  // numCols properties send from the Content component through the dragBlock\n  // property.\n  onDrop(e) {\n    if (this.props.dragBlock) {\n      // instantiate new block\n      let newBlock = { \n        rowPos: parseInt(e.currentTarget.id.split(\",\")[0]), \n        colPos: parseInt(e.currentTarget.id.split(\",\")[1]), \n        numRows: this.props.dragBlock.numRows,\n        numCols: this.props.dragBlock.numCols\n      };\n      let lastRow = newBlock.rowPos + newBlock.numRows - 1; // newBlock's max row\n      let lastCol = newBlock.colPos + newBlock.numCols - 1; // newBlock's max column\n      // ensure four block is not in the winning position\n      if (\n        newBlock.numRows*newBlock.numCols === 4 && \n        newBlock.rowPos === this.props.winningRow && \n        newBlock.colPos === this.props.winningCol\n      ) {\n        alert(\"The block of size 4 cannot be placed in the winning position\");\n      // ensure block does not fall off board\n      } else if(lastRow > 4 || lastCol > 3) {\n        alert(\"Invalid block placement\");\n      // ensure block of size 4 is not on the winning row\n      } else {\n        let newBlocks = this.state.blocks;\n        newBlocks.push(newBlock);\n        // push new block\n        this.setState(state => ({\n          blocksAdded: true,\n          blocks: newBlocks\n        }));\n        this.props.onAddBlock(this.state.blocks);\n      }\n    }\n  }\n\n  // function for displaying current board blocks\n  getBlocks(blocks) {\n    // maintain sync between the current blocks in the Board component's state\n    // and the blocks passed in by the Content component\n    if (blocks !== this.state.blocks) {\n      this.setState(state => ({\n        blocks: blocks\n      }));\n    }\n    const NoBlock = {\n      numRows: 0,\n      numCols: 0\n    };\n    // initialize 2d array with no blocks\n    var board = new Array(5);\n    for (var i = 0; i < 5; i++) {\n      var tempRow = {\n        id: i,\n        row: new Array(4)\n      }\n      for (var j = 0; j < 4; j++) {\n        var tempCell = {\n          id: i.toString() + \",\" + j.toString(), \n          val: {\n            numRows: 0,\n            numCols: 0,\n            rowPos: i,\n            colPos: j,\n          }\n        }\n        tempRow.row[j] = tempCell;\n      }\n      board[i] = tempRow;\n    }\n    // insert blocks\n    for (var b = 0; b < blocks.length; b++) {\n      var block = blocks[b];\n      let lastRow = block.rowPos + block.numRows - 1;\n      let lastCol = block.colPos + block.numCols - 1;      \n      for (var r = block.rowPos; r <= lastRow; r++) {\n        for (var c = block.colPos; c <= lastCol; c++) {\n          if (r === block.rowPos && c === block.colPos) {\n            ((board[r].row)[c]).val = block;\n          } else if (r === block.rowPos){\n            ((board[r].row)[c]).val = null;\n          } else {\n            ((board[r].row)[c]).val = NoBlock;\n          }\n        }\n      }\n    }\n    return board;\n  }\n\n  render() { \n    const rows = this.getBlocks(this.props.blocks);\n    const board = rows.map( (row) =>\n      <BoardRow\n        key={row.id}\n        cells={row.row}\n        onDropFunc={this.onDrop}\n        onClickFunc={this.props.onClickFunc}\n        winningRow={this.props.winningRow}\n        winningCol={this.props.winningCol}\n      />\n    )\n    return ( \n      <div className=\"p-0 mt-4 border\" id=\"board\">\n        {board}   \n      </div>\n    );\n  }\n}\n\nclass DraggableBlock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rel: null,\n      pos: {\n        left: 0,\n        top: 0\n      }\n    };\n    this.drag = this.drag.bind(this);\n    this.move = this.move.bind(this);\n    this.drop = this.drop.bind(this);\n  }\n\n  // function called on mouse down on a draggable block\n  drag(e) {\n    if (e.button !== 0) return\n    var currPos = e.currentTarget.getBoundingClientRect();\n    this.setState((state) => ({\n      rel: {\n        left: currPos.left,\n        top: currPos.top\n      }\n    }));\n    document.addEventListener(\"mousemove\", this.move); // listen for mouse move\n    document.addEventListener(\"mouseup\", this.drop); // listen for mouse up (drop)\n    this.props.onDragFunc(e.currentTarget.id); // send content the current block's ID\n    e.stopPropagation();\n    e.preventDefault();\n  }\n  \n  // function called on mouse move after mouse down on a draggable block\n  move(e) {\n    var x = e.pageX;\n    var y = e.pageY;\n    this.setState((state) => ({\n      pos: {\n        left: x - this.state.rel.left,\n        top: y - this.state.rel.top\n      }\n    }));\n    e.stopPropagation();\n    e.preventDefault();\n  }\n\n\n  // function called on mouse up after mouse down on a draggable block\n  drop(e) {\n    this.setState((state) => ({\n      rel: null,\n      pos: {\n        left: 0,\n        top: 0\n      }\n    }));\n    document.removeEventListener(\"mousemove\", this.move);\n    document.removeEventListener(\"mouseup\", this.drop);\n    e.stopPropagation();\n    e.preventDefault();\n  }\n\n  render() {\n    if (this.props.size === 4) {\n      return (\n        <div className=\"draggable-fourblock m-0 bg-danger border border-dark rounded draggable\"\n          id={this.props.id}\n          style={{\n            position: \"relative\",\n            left: this.state.pos.left + \"px\",\n            top: this.state.pos.top + \"px\"\n          }}\n          onMouseDown={this.drag}>\n        </div>\n      );\n    } else if (this.props.size === 2) {\n      if (this.props.block.numCols === 1) {\n        return (\n          <div className=\"draggable-twoblockV m-0 bg-primary border border-dark rounded draggable\"\n            id={this.props.id}\n            style={{\n              position: \"relative\",\n              left: this.state.pos.left + \"px\",\n              top: this.state.pos.top + \"px\"\n            }}\n            onMouseDown={this.drag}>\n          </div>\n        );\n      } else if (this.props.block.numCols === 2) {\n        return (\n          <div className=\"draggable-twoblockH m-0 bg-warning border border-dark rounded draggable\"\n            id={this.props.id}\n            style={{\n              position: \"relative\",\n              left: this.state.pos.left + \"px\",\n              top: this.state.pos.top + \"px\"\n            }}\n            onMouseDown={this.drag}>\n          </div>\n        );\n      }\n    } else if (this.props.size === 1) {\n      return (\n        <div className=\"draggable-oneblock m-0 bg-success border border-dark rounded draggable\"\n          id={this.props.id}\n          style={{\n            position: \"relative\",\n            left: this.state.pos.left + \"px\",\n            top: this.state.pos.top + \"px\"\n          }}\n          onMouseDown={this.drag}>\n        </div>\n      );\n    }\n  }\n}\n\nfunction Toolbar(props) {\n  // only show toolbar when board is cleared or blocks are being added\n  if (props.show) {\n    return (\n      <div className=\"col-10 col-xl-4 mt-5\">\n        <div className=\"row justify-content-center\">\n          <DraggableBlock \n            size={4} \n            id=\"2,2\"\n            onDragFunc={props.onDragFunc}\n          />\n          <div className=\"mx-2\"></div>\n            <DraggableBlock \n              size={2} \n              id=\"2,1\" \n              block={{ numRows: 2, numCols: 1 }} \n              onDragFunc={props.onDragFunc}\n            />\n        </div>\n        <div className=\"row justify-content-center mt-3\">\n          <DraggableBlock \n            size={1} \n            id=\"1,1\" \n            onDragFunc={props.onDragFunc}\n          />\n          <div className=\"mx-2\"></div>\n          <DraggableBlock \n            size={2} \n            id=\"1,2\" \n            block={{ numRows: 1, numCols: 2 }} \n            onDragFunc={props.onDragFunc}\n          />\n        </div>\n      </div>\n    );\n  } else {\n    return <span></span>;\n  }\n}\n\nfunction Buttons(props) {\n  // button for clearing board\n  const clearButton = (\n    <button className=\"btn btn-danger mr-2\" \n      onClick={props.onClear}>\n        Clear\n    </button>\n  );\n  // button for clearing a user made board\n  const doubleClearButton = (\n    <button className=\"btn btn-danger mr-2\" \n      onClick={props.onDoubleClear}>\n        Clear\n    </button>\n  );\n  // button for displaying the default board\n  const defaultButton = (\n    <button className=\"btn btn-warning mx-1\" \n      onClick={props.onDefault}>\n        Default\n    </button>\n  );\n  // button for running script to solve board\n  const solveButton = (\n    <button className=\"btn btn-primary ml-2\" \n      onClick={props.onSolve}>\n        Solve!\n    </button>\n  );\n  // button to see previous move in solution\n  const prevButton = (\n    <button className=\"btn btn-danger mr-2\" \n      onClick={props.onPrev}\n      id=\"prev-btn\">\n        Prev\n    </button>\n  );\n  //button to see next move in solution\n  const nextButton = (\n    <button className=\"btn btn-warning mx-2\" \n      onClick={props.onNext}>\n        Next\n    </button>\n  );\n  // button to finalize moves in solution\n  const finishButton = (\n    <button className=\"btn btn-success ml-2\" \n      onClick={props.onFinish}>\n        Finish\n    </button>\n  );\n  \n  // buttons displayed after solve button is pressed\n  if (props.solved) {\n    return (\n      <div className=\"text-center mt-3\">\n        {prevButton}\n        {nextButton}\n        {finishButton}\n      </div>\n    );\n  // buttons displayed after blocks have been dropped\n  } else if (props.blocksAdded){\n    return (\n      <div className=\"text-center mt-3\">\n        {doubleClearButton}\n        {solveButton}\n      </div>\n    );\n  // buttons displayed when board is cleared of blocks\n  } else if (props.cleared){\n    return (\n      <div className=\"text-center mt-3\">\n        {defaultButton}\n        {solveButton}\n      </div>\n    );\n  // buttons displayed when default board is shown\n  } else if (props.finished) {\n    return <span></span>;\n  } else {\n    return (\n      <div className=\"text-center mt-3\">\n        {clearButton}\n        {solveButton}\n      </div>\n    );\n  }\n}\n\nclass Content extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      blocks: [],\n      blocksAdded: false,\n      cleared: true,\n      displayText: \"Klotski Solver\",\n      default: false,\n      solved: false,\n      finished: false,\n      dragBlock: null,\n      winningRow: 3,\n      winningCol: 1\n    };\n\n    this.blocksAdded = this.blocksAdded.bind(this);\n    this.clear = this.clear.bind(this);\n    this.doubleClear = this.doubleClear.bind(this);\n    this.default = this.default.bind(this);\n    this.solve = this.solve.bind(this);\n    this.next = this.next.bind(this);\n    this.prev = this.prev.bind(this);\n    this.restart = this.restart.bind(this);\n    this.finish = this.finish.bind(this);\n    this.dragBlockInfo = this.dragBlockInfo.bind(this);\n    this.clearDragBlock = this.clearDragBlock.bind(this);\n    this.setWinningPos = this.setWinningPos.bind(this);\n  }\n\n  // Function passed to the Board component that updates the Content\n  // blocksAdded state property when a user adds a block to the board.\n  blocksAdded(blocks) {\n    this.setState(state => ({\n      blocks: blocks,\n      blocksAdded: true,\n      cleared: false,\n      default: false\n    }))\n  }\n\n  // Function passed to the Buttons component that updates the Content\n  // cleared state property when a user clicks the clear button.\n  clear() {\n    this.setState(state => ({\n      blocks: [],\n      blocksAdded: false,\n      cleared: true,\n      default: false,\n      displayText: \"Klotski Solver\",\n      solved: false,\n      finished: false,\n      dragBlock: null,\n      winningRow: 3,\n      winningCol: 1\n    }));\n  }\n\n  // Function passed to the Buttons component that calls `clear()` and \n  // updates the Content doubleCleared state state property when a user \n  // clicks the doubleClear button.\n  doubleClear() {\n    this.clear();\n  }\n\n  restart() {\n    let clearFunc = this.clear;\n    setTimeout(\n      function () {clearFunc()},\n      3000\n    );\n  }\n\n  // Function passed to the Buttons component that updates the Content\n  // solved state property when a user clicks the solve button.\n  solve() {\n    try {\n      var s = new Solver(\n        this.state.blocks, \n        this.state.winningRow, \n        this.state.winningCol\n      );\n      s.solve();\n      let solutionMoves = s.getBoards();\n      const numMoves = solutionMoves.length;\n      if (numMoves === 0) {\n        this.setState(state => ({\n          displayText: \"No Solution Found :(\"\n        }));\n        this.restart();\n      } else {\n        this.setState(state => ({\n          blocksAdded: false,\n          cleared: false,\n          default: false,\n          displayText: \"Solution of Length \" + numMoves.toString() + \" Found!\",\n          boards: solutionMoves,\n          boardIdx: -1,\n          solved: true\n        }));\n      }\n    } catch (err) {\n      alert(err);\n    }\n  }\n\n  // Function passed to the Buttons component that updates the Content\n  // boards and blocks state properties when a user clicks the next button.\n  next() {\n    if (this.state.boards.length === 0) {\n      return;\n    } else {\n      if (this.state.boardIdx === this.state.boards.length-1) {\n        this.setState(state => ({\n          displayText: \"You Win!\"\n        }));\n        this.restart();    \n      } else {\n        this.setState(state => ({\n          blocks: this.state.boards[this.state.boardIdx + 1],\n          boardIdx: this.state.boardIdx + 1,\n          displayText: \"Move \" + (this.state.boardIdx+2).toString()\n        }));\n      }\n    }\n  }\n\n  // Function passed to the Buttons component that updates the Content\n  // boards and blocks state properties when a user clicks the prev button.\n  prev() {\n     if (this.state.boards.length === 0) {\n      return;\n    } else {\n      if (this.state.boardIdx === -1) {\n        return;\n      } else {\n        this.setState(state => ({\n          blocks: this.state.boards[this.state.boardIdx - 1],\n          boardIdx: this.state.boardIdx - 1,\n          displayText: (this.state.boardIdx <= 0 ? \"Klotski Solver\" : \"Move \" + this.state.boardIdx.toString())\n        }));\n      }\n    }\n  }\n\n  // Function passed to the Buttons component that updates the Content\n  // boards and blocks state properties when a user clicks the next button.\n  finish() {\n    this.setState(state => ({ \n      solved: false,\n      finished: true \n    }));\n    let i = this.state.boardIdx;\n    let n = this.state.boards.length;\n    let callFunction = this.next;\n    // repeat calls to next with a .5 second interval\n    var repeater = setInterval(function () {\n      if (i < n) {\n        callFunction();\n        i++;\n      } else {\n        clearInterval(repeater);\n      }\n    }, 250);\n  }\n\n\n  // Function passed to the Buttons component that updates the Content\n  // default state property when a user clicks the default button.\n  default() {\n    const initialBlocks = [\n      { rowPos: 0, colPos: 0, numRows: 2, numCols: 1 },\n      { rowPos: 0, colPos: 1, numRows: 2, numCols: 2 },\n      { rowPos: 0, colPos: 3, numRows: 2, numCols: 1 },\n      { rowPos: 2, colPos: 0, numRows: 2, numCols: 1 },\n      { rowPos: 2, colPos: 1, numRows: 1, numCols: 2 },\n      { rowPos: 2, colPos: 3, numRows: 2, numCols: 1 },\n      { rowPos: 3, colPos: 1, numRows: 1, numCols: 1 },\n      { rowPos: 3, colPos: 2, numRows: 1, numCols: 1 },\n      { rowPos: 4, colPos: 0, numRows: 1, numCols: 1 },\n      { rowPos: 4, colPos: 3, numRows: 1, numCols: 1 }\n    ]\n    this.setState(state => ({\n      blocks: initialBlocks,\n      blocksAdded: false,\n      cleared: false,\n      default: true,\n      winningRow: 3,\n      winningCol: 1\n    }));\n  }\n\n  // Function passed to the Toolbar component (onDragFunc) which alerts the Content\n  // component when a DraggableBlock is being dragged and send the block's \n  // corresponding ID which contains the block's numRows and numCols properties.\n  // This information is used to update the Content dragBlock state property, which\n  // is passed to the Board component.\n  dragBlockInfo(id) {\n    this.setState(state => ({\n      dragBlock: {\n        numRows: parseInt(id.split(\",\")[0]),\n        numCols: parseInt(id.split(\",\")[1])\n      }\n    }));\n  } \n\n  setWinningPos(id) {\n    if (this.state.cleared) {\n      this.setState(state => ({\n        winningRow: parseInt(id.split(\",\")[0]),\n        winningCol: parseInt(id.split(\",\")[1])\n      }));\n    }\n  }\n\n  // Function passed to the Board component on mouse down, which is used to nullify\n  // the Content dragBlock state property.\n  clearDragBlock(e) {\n    this.setState(state => ({\n      dragBlock: null\n    }));\n  }\n\n  render() {\n    return (\n      <div id=\"content-wrapper\">\n        <div className=\"h1 text-center mt-1 mb-0\" id=\"header\">\n          {this.state.displayText} \n        </div>\n        <div className=\"row justify-content-center px-0 mx-0\"\n          onMouseDown={this.clearDragBlock}>\n          <div className=\"col-4 board\">\n            <Board \n              blocks={this.state.blocks}\n              dragBlock={this.state.dragBlock}\n              onAddBlock={this.blocksAdded}\n              onClickFunc={this.setWinningPos}\n              winningRow={this.state.winningRow}\n              winningCol={this.state.winningCol}\n            />\n            <Buttons \n              blocksAdded={this.state.blocksAdded}\n              cleared={this.state.cleared}\n              finished={this.state.finished}\n              solved={this.state.solved}\n              onClear={this.clear}\n              onDoubleClear={this.doubleClear}\n              onDefault={this.default}\n              onFinish={this.finish}\n              onNext={this.next}\n              onPrev={this.prev}\n              onSolve={this.solve}\n            />\n          </div>\n          <Toolbar \n            show={this.state.cleared || this.state.blocksAdded}\n            onDragFunc={this.dragBlockInfo}\n          />\n        </div>\n        <div className=\"text-center text-secondary\" id=\"footer\">\n          Developed by Sam Royall\n        </div>\n      </div>\n    );   \n  }\n}\n\nfunction App() {\n  return (\n    <Content />   \n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}